/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package STOSkillPlanner;

import javax.swing.*;

/**
 *
 * @author Kenneth Robertson
 * @date March 16 2016
 */
public class STOSkillPlanner extends javax.swing.JFrame {

    /**
     * Creates new form STOSkillPlanner
     */
    public STOSkillPlanner() {
        toggleButtons = new java.util.ArrayList<JToggleButton>();
        
        initComponents();
        
        spentOn = new java.util.ArrayList<Integer>();
        for(int i = 0; i < 5; i++)
            spentOn.add(0);
        //UI
        forceOrderedDescent = true;
        additionalSciUltimate = 0; //set to 0;
        additionalTacUltimate = 0;
        additionalEngUltimate = 0;
        //Point Trackers
        skillPoints = 46;
        spentOnLieutenant = 0;
        spentOnLiuCommander = 0;
        spentOnCommander = 0;
        spentOnCaptain = 0;
        spentOnAdmiral = 0;
        spentOnEngineering = 0;
        spentOnScience = 0;
        spentOnTactical = 0;
        //Skill Trackers
        hullRestoration = 0;
        hullCapacity = 0;
        sheildRestoration = 0;
        sheildCapacity = 0;
        energyTraining = 0;
        projectileTraining = 0;
        hullPlating = false;
        energizedPlating = false;
        ablativePlating = false;
        damageControl = 0;
        targeting = 0;
        defensiveManuvering = 0;
        sheildRegeneration = 0;
        sheildHardness = 0;
        hullPen = 0;
        sheildPen = 0;
        EPS = 0; 
        impulseShunt = false;
        impulse = 0;
        control = 0;
        controlAmplification = false;
        drain = 0; 
        drainInfection = false;
        defSubsystem = false;
        sheildSubsystem = false;
        auxSubsystem = false;
        offSubsystem = false;
        wepSubsystem = false;
        engSubsystem = false;
        weaponAmp = 0;
        weaponSpec = 0;
        partGen = 0;
        sensorRange = 0;
        tacReadiness = 0;
        coordination = false;
        defCoordination = false;
        offCoordination = false;
        sciReadiness = 0;
        sheildMastery = false;
        sheildAbsorption = false;
        sheildReflection = false;
        engReadiness = 0;
        warpCore = 0; 
        warpEfficency = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aboutBox = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        mainScrollPane = new javax.swing.JScrollPane();
        mainScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        skillPanel = new javax.swing.JPanel();
        skillPlacementPanel = new javax.swing.JPanel();
        lieutenantPanel = new javax.swing.JPanel();
        liutEngPanel = new javax.swing.JPanel();
        hullRestorationPanel = new javax.swing.JPanel();
        hullRestorationToggleButton1 = new javax.swing.JToggleButton();
        hullRestorationToggleButton2 = new javax.swing.JToggleButton();
        hullRestorationToggleButton3 = new javax.swing.JToggleButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        hullCapacityPanel = new javax.swing.JPanel();
        hullCapacityToggleButton1 = new javax.swing.JToggleButton();
        hullCapacityToggleButton2 = new javax.swing.JToggleButton();
        hullCapacityToggleButton3 = new javax.swing.JToggleButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        liutSciPanel = new javax.swing.JPanel();
        sheildRestorationPanel = new javax.swing.JPanel();
        sheildRestorationToggleButton1 = new javax.swing.JToggleButton();
        sheildRestorationToggleButton2 = new javax.swing.JToggleButton();
        sheildRestorationToggleButton3 = new javax.swing.JToggleButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        sheildCapacityPanel = new javax.swing.JPanel();
        sheildCapactiyToggleButton1 = new javax.swing.JToggleButton();
        sheildCapactiyToggleButton2 = new javax.swing.JToggleButton();
        sheildCapactiyToggleButton3 = new javax.swing.JToggleButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        liutTacPanel = new javax.swing.JPanel();
        energyTrainingPanel = new javax.swing.JPanel();
        energyToggleButton1 = new javax.swing.JToggleButton();
        energyToggleButton2 = new javax.swing.JToggleButton();
        energyToggleButton3 = new javax.swing.JToggleButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        torpedoTrainingPanel = new javax.swing.JPanel();
        projectileToggleButton1 = new javax.swing.JToggleButton();
        projectileToggleButton2 = new javax.swing.JToggleButton();
        projectileToggleButton3 = new javax.swing.JToggleButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ltCommanderPanel = new javax.swing.JPanel();
        liutCommandEngPanel = new javax.swing.JPanel();
        platingPanel = new javax.swing.JPanel();
        hullPlatingToggleButton = new javax.swing.JToggleButton();
        energizedPlatingToggleButton = new javax.swing.JToggleButton();
        ablativePlatingToggleButton = new javax.swing.JToggleButton();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        damageControlPanel = new javax.swing.JPanel();
        damageControlToggleButton1 = new javax.swing.JToggleButton();
        damageControlToggleButton2 = new javax.swing.JToggleButton();
        damageControlToggleButton3 = new javax.swing.JToggleButton();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        liutCommandTacPanel = new javax.swing.JPanel();
        targetingPanel = new javax.swing.JPanel();
        targetingToggleButton1 = new javax.swing.JToggleButton();
        targetingToggleButton2 = new javax.swing.JToggleButton();
        targetingToggleButton3 = new javax.swing.JToggleButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        defensiveManuveringPanel = new javax.swing.JPanel();
        defensiveManuveringToggleButton1 = new javax.swing.JToggleButton();
        defensiveManuveringToggleButton2 = new javax.swing.JToggleButton();
        defensiveManuveringToggleButton3 = new javax.swing.JToggleButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        liutCommandSciPanel = new javax.swing.JPanel();
        sheildRegenerationPanel = new javax.swing.JPanel();
        sheildRegenerationToggleButton1 = new javax.swing.JToggleButton();
        sheildRegenerationToggleButton2 = new javax.swing.JToggleButton();
        sheildRegenerationToggleButton3 = new javax.swing.JToggleButton();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        sheildHardnessPanel = new javax.swing.JPanel();
        sheildHardnessToggleButton1 = new javax.swing.JToggleButton();
        sheildHardnessToggleButton2 = new javax.swing.JToggleButton();
        sheildHardnessToggleButton3 = new javax.swing.JToggleButton();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        commanderPanel = new javax.swing.JPanel();
        commandTacPanel = new javax.swing.JPanel();
        hullPenPanel = new javax.swing.JPanel();
        hullPenToggleButton1 = new javax.swing.JToggleButton();
        hullPenToggleButton2 = new javax.swing.JToggleButton();
        hullPenToggleButton3 = new javax.swing.JToggleButton();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        sheildPenPanel = new javax.swing.JPanel();
        sheildPenToggleButton1 = new javax.swing.JToggleButton();
        sheildPenToggleButton2 = new javax.swing.JToggleButton();
        sheildPenToggleButton3 = new javax.swing.JToggleButton();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        commandEngPanel = new javax.swing.JPanel();
        epsPanel = new javax.swing.JPanel();
        EPSToggleButton1 = new javax.swing.JToggleButton();
        EPSToggleButton2 = new javax.swing.JToggleButton();
        impulseShuntToggleButton = new javax.swing.JToggleButton();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        impulsePanel = new javax.swing.JPanel();
        impulseToggleButton1 = new javax.swing.JToggleButton();
        impulseToggleButton2 = new javax.swing.JToggleButton();
        impulseToggleButton3 = new javax.swing.JToggleButton();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        commandSciPanel = new javax.swing.JPanel();
        controlPanel = new javax.swing.JPanel();
        controlToggleButton1 = new javax.swing.JToggleButton();
        controlToggleButton2 = new javax.swing.JToggleButton();
        controlAmplificationToggleButton = new javax.swing.JToggleButton();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        drainPanel = new javax.swing.JPanel();
        drainToggleButton1 = new javax.swing.JToggleButton();
        drainToggleButton2 = new javax.swing.JToggleButton();
        drainInfectionToggleButton = new javax.swing.JToggleButton();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        captainPanel = new javax.swing.JPanel();
        captainTacPanel = new javax.swing.JPanel();
        weaponAmpPanel = new javax.swing.JPanel();
        weaponAmpToggleButton1 = new javax.swing.JToggleButton();
        weaponAmpToggleButton2 = new javax.swing.JToggleButton();
        weaponAmpToggleButton3 = new javax.swing.JToggleButton();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        weaponSpecPanel = new javax.swing.JPanel();
        weaponSpecToggleButton1 = new javax.swing.JToggleButton();
        weaponSpecToggleButton2 = new javax.swing.JToggleButton();
        weaponSpecToggleButton3 = new javax.swing.JToggleButton();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        captainEngPanel = new javax.swing.JPanel();
        defSubsystemPanel = new javax.swing.JPanel();
        defSubsystemToggleButton = new javax.swing.JToggleButton();
        sheildSubsystemToggleButton = new javax.swing.JToggleButton();
        auxSubsystemToggleButton = new javax.swing.JToggleButton();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        offSubsystemPanel = new javax.swing.JPanel();
        offSubsystemToggleButton = new javax.swing.JToggleButton();
        weaponSubsystemToggleButton = new javax.swing.JToggleButton();
        engineSubsystemToggleButton = new javax.swing.JToggleButton();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        captainSciPanel = new javax.swing.JPanel();
        partGenPanel = new javax.swing.JPanel();
        partGenToggleButton1 = new javax.swing.JToggleButton();
        partGenToggleButton2 = new javax.swing.JToggleButton();
        partGenToggleButton3 = new javax.swing.JToggleButton();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        rangePanel = new javax.swing.JPanel();
        rangeToggleButton1 = new javax.swing.JToggleButton();
        rangeToggleButton2 = new javax.swing.JToggleButton();
        rangeToggleButton3 = new javax.swing.JToggleButton();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        admiralPanel = new javax.swing.JPanel();
        admiralTacPanel = new javax.swing.JPanel();
        tacReadinessPanel = new javax.swing.JPanel();
        tacReadinessToggleButton1 = new javax.swing.JToggleButton();
        tacReadinessToggleButton2 = new javax.swing.JToggleButton();
        tacReadinessToggleButton3 = new javax.swing.JToggleButton();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        coordinationPanel = new javax.swing.JPanel();
        coordinationToggleButton = new javax.swing.JToggleButton();
        defCoordinationToggleButton = new javax.swing.JToggleButton();
        offCoordinationToggleButton = new javax.swing.JToggleButton();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        admiralEngPanel = new javax.swing.JPanel();
        warpCorePanel = new javax.swing.JPanel();
        warpPotentialToggleButton1 = new javax.swing.JToggleButton();
        warpPotentialToggleButton2 = new javax.swing.JToggleButton();
        warpEfficiencyToggleButton = new javax.swing.JToggleButton();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        engReadinessPanel = new javax.swing.JPanel();
        engReadinessToggleButton1 = new javax.swing.JToggleButton();
        engReadinessToggleButton2 = new javax.swing.JToggleButton();
        engReadinessToggleButton3 = new javax.swing.JToggleButton();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        admiralSciPanel = new javax.swing.JPanel();
        sciReadinessPanel = new javax.swing.JPanel();
        sciReadinessToggleButton1 = new javax.swing.JToggleButton();
        sciReadinessToggleButton2 = new javax.swing.JToggleButton();
        sciReadinessToggleButton3 = new javax.swing.JToggleButton();
        jLabel66 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        sheildMasteryPanel = new javax.swing.JPanel();
        sheildMasteryToggleButton = new javax.swing.JToggleButton();
        sheildAbsorptionToggleButton = new javax.swing.JToggleButton();
        sheildReflectionToggleButton = new javax.swing.JToggleButton();
        jLabel64 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        additionalAbilitiesPanel = new javax.swing.JPanel();
        engineeringBoostComboBox1 = new javax.swing.JComboBox();
        engineeringBoostComboBox2 = new javax.swing.JComboBox();
        engineeringBoostComboBox3 = new javax.swing.JComboBox();
        engineeringBoostComboBox4 = new javax.swing.JComboBox();
        scienceBoostComboBox1 = new javax.swing.JComboBox();
        scienceBoostComboBox2 = new javax.swing.JComboBox();
        scienceBoostComboBox3 = new javax.swing.JComboBox();
        scienceBoostComboBox4 = new javax.swing.JComboBox();
        tacticalBoostComboBox1 = new javax.swing.JComboBox();
        tacticalBoostComboBox2 = new javax.swing.JComboBox();
        tacticalBoostComboBox3 = new javax.swing.JComboBox();
        tacticalBoostComboBox4 = new javax.swing.JComboBox();
        windowRadioButton = new javax.swing.JRadioButton();
        manipulationRadioButton = new javax.swing.JRadioButton();
        shellRadioButton = new javax.swing.JRadioButton();
        sciUltimateCheckBox = new javax.swing.JCheckBox();
        engUltimateCheckBox = new javax.swing.JCheckBox();
        tacUltimateCheckBox = new javax.swing.JCheckBox();
        wakeningRadioButton = new javax.swing.JRadioButton();
        explosionlRadioButton = new javax.swing.JRadioButton();
        enhancedRadioButton = new javax.swing.JRadioButton();
        reactionRadioButton = new javax.swing.JRadioButton();
        assaultRadioButton = new javax.swing.JRadioButton();
        teamRadioButton = new javax.swing.JRadioButton();
        skillCaptionPanel = new javax.swing.JPanel();
        pointsPanel = new javax.swing.JPanel();
        skillPointsLabel = new javax.swing.JLabel();
        tacPointsUsedLabel = new javax.swing.JLabel();
        sciPointsUsedLabel = new javax.swing.JLabel();
        engPointsUsedLabel = new javax.swing.JLabel();
        engLabelPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tacLabelPanel = new javax.swing.JPanel();
        jLabel58 = new javax.swing.JLabel();
        sciLabelPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        clearPointsButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        UIMenu = new javax.swing.JMenu();
        resizableCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        aboutBox.setTitle("About");
        aboutBox.setMinimumSize(new java.awt.Dimension(400, 303));
        aboutBox.setName("About"); // NOI18N
        aboutBox.setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText(" Star Trek Online Skill Planner Revamp ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(112, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(102, 102, 102))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addContainerGap())
        );

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("This is a very rough alpha, but it is functional enough to allow players to try out different builds.  \n\nIf you like this program and want me to continue working on it (adding icons, tooltips, total stats, saving/loading builds etc.) let me know otherwise I will likely let this project die.");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea1.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(jTextArea2.getFont().deriveFont(jTextArea2.getFont().getSize()-2f));
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText("Written by Kenneth Robertson, STO handle @uglydisease\nSuggestions: KenDaveRob@gmail.com\nhttp://www.kenssoftware.net");
        jTextArea2.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout aboutBoxLayout = new javax.swing.GroupLayout(aboutBox.getContentPane());
        aboutBox.getContentPane().setLayout(aboutBoxLayout);
        aboutBoxLayout.setHorizontalGroup(
            aboutBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(aboutBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        aboutBoxLayout.setVerticalGroup(
            aboutBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutBoxLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("STO Skill Planner Revamp (Alpha)");
        setPreferredSize(new java.awt.Dimension(INITIAL_WIDTH, INITIAL_HEIGHT));
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        mainScrollPane.setAutoscrolls(true);
        mainScrollPane.setMaximumSize(new java.awt.Dimension(3000, 2000));
        mainScrollPane.setMinimumSize(new java.awt.Dimension(400, 400));
        mainScrollPane.setName(""); // NOI18N
        mainScrollPane.setPreferredSize(new java.awt.Dimension(1347, 600));

        skillPlacementPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lieutenantPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        hullRestorationToggleButton1.setText("<html>Hull<br />Restoration 1</html>");
        toggleButtons.add(hullRestorationToggleButton1);
        hullRestorationToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hullRestorationToggleButton1ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        hullRestorationToggleButton2.setText("<html>Hull<br />Restoration 2</html>");
        toggleButtons.add(hullRestorationToggleButton2);
        hullRestorationToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hullRestorationToggleButton2ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        hullRestorationToggleButton3.setText("<html>Hull<br />Restoration 3</html>");
        toggleButtons.add(hullRestorationToggleButton3);
        hullRestorationToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hullRestorationToggleButton3ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        jLabel16.setText("|");

        jLabel17.setText("|");

        javax.swing.GroupLayout hullRestorationPanelLayout = new javax.swing.GroupLayout(hullRestorationPanel);
        hullRestorationPanel.setLayout(hullRestorationPanelLayout);
        hullRestorationPanelLayout.setHorizontalGroup(
            hullRestorationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hullRestorationPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(hullRestorationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hullRestorationToggleButton3)
                    .addComponent(hullRestorationToggleButton2)
                    .addComponent(hullRestorationToggleButton1))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hullRestorationPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(hullRestorationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hullRestorationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hullRestorationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );
        hullRestorationPanelLayout.setVerticalGroup(
            hullRestorationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hullRestorationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hullRestorationToggleButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel16)
                .addGap(18, 18, 18)
                .addComponent(hullRestorationToggleButton2)
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addComponent(hullRestorationToggleButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hullCapacityToggleButton1.setText("<html>Hull<br />Capacity 1</html>");
        hullCapacityToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hullCapacityToggleButton1ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        hullCapacityToggleButton2.setText("<html>Hull<br />Capacity 2</html>");
        hullCapacityToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hullCapacityToggleButton2ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        hullCapacityToggleButton3.setText("<html>Hull<br />Capacity 3</html>");
        hullCapacityToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hullCapacityToggleButton3ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        jLabel18.setText("|");

        jLabel19.setText("|");

        javax.swing.GroupLayout hullCapacityPanelLayout = new javax.swing.GroupLayout(hullCapacityPanel);
        hullCapacityPanel.setLayout(hullCapacityPanelLayout);
        hullCapacityPanelLayout.setHorizontalGroup(
            hullCapacityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hullCapacityPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(hullCapacityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hullCapacityToggleButton3)
                    .addComponent(hullCapacityToggleButton2)
                    .addComponent(hullCapacityToggleButton1))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hullCapacityPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(hullCapacityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hullCapacityPanelLayout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hullCapacityPanelLayout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );
        hullCapacityPanelLayout.setVerticalGroup(
            hullCapacityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hullCapacityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hullCapacityToggleButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addGap(18, 18, 18)
                .addComponent(hullCapacityToggleButton2)
                .addGap(18, 18, 18)
                .addComponent(jLabel19)
                .addGap(18, 18, 18)
                .addComponent(hullCapacityToggleButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout liutEngPanelLayout = new javax.swing.GroupLayout(liutEngPanel);
        liutEngPanel.setLayout(liutEngPanelLayout);
        liutEngPanelLayout.setHorizontalGroup(
            liutEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, liutEngPanelLayout.createSequentialGroup()
                .addContainerGap(242, Short.MAX_VALUE)
                .addComponent(hullCapacityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(liutEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(liutEngPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(hullRestorationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(242, Short.MAX_VALUE)))
        );
        liutEngPanelLayout.setVerticalGroup(
            liutEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, liutEngPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hullCapacityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(liutEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(liutEngPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(hullRestorationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        sheildRestorationToggleButton1.setText("<html>Sheild<br />Restoration 1</html>");
        sheildRestorationToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sheildRestorationToggleButton1ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        sheildRestorationToggleButton2.setText("<html>Sheild<br />Restoration 2</html>");
        sheildRestorationToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sheildRestorationToggleButton2ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        sheildRestorationToggleButton3.setText("<html>Sheild<br />Restoration 3</html>");
        sheildRestorationToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sheildRestorationToggleButton3ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        jLabel12.setText("|");

        jLabel13.setText("|");

        javax.swing.GroupLayout sheildRestorationPanelLayout = new javax.swing.GroupLayout(sheildRestorationPanel);
        sheildRestorationPanel.setLayout(sheildRestorationPanelLayout);
        sheildRestorationPanelLayout.setHorizontalGroup(
            sheildRestorationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sheildRestorationPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(sheildRestorationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sheildRestorationToggleButton3)
                    .addComponent(sheildRestorationToggleButton2)
                    .addComponent(sheildRestorationToggleButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildRestorationPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(sheildRestorationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildRestorationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildRestorationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );
        sheildRestorationPanelLayout.setVerticalGroup(
            sheildRestorationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sheildRestorationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sheildRestorationToggleButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(sheildRestorationToggleButton2)
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(sheildRestorationToggleButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        sheildCapactiyToggleButton1.setText("<html>Sheild<br />Capacity 1</html>");
        sheildCapactiyToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sheildCapactiyToggleButton1ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        sheildCapactiyToggleButton2.setText("<html>Sheild<br />Capacity 2</html>");
        sheildCapactiyToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sheildCapactiyToggleButton2ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        sheildCapactiyToggleButton3.setText("<html>Sheild<br />Capacity 3</html>");
        sheildCapactiyToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sheildCapactiyToggleButton3ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        jLabel10.setText("|");

        jLabel11.setText("|");

        javax.swing.GroupLayout sheildCapacityPanelLayout = new javax.swing.GroupLayout(sheildCapacityPanel);
        sheildCapacityPanel.setLayout(sheildCapacityPanelLayout);
        sheildCapacityPanelLayout.setHorizontalGroup(
            sheildCapacityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sheildCapacityPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(sheildCapacityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sheildCapactiyToggleButton3)
                    .addComponent(sheildCapactiyToggleButton2)
                    .addComponent(sheildCapactiyToggleButton1))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildCapacityPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(sheildCapacityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildCapacityPanelLayout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildCapacityPanelLayout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );
        sheildCapacityPanelLayout.setVerticalGroup(
            sheildCapacityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sheildCapacityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sheildCapactiyToggleButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(sheildCapactiyToggleButton2)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(sheildCapactiyToggleButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout liutSciPanelLayout = new javax.swing.GroupLayout(liutSciPanel);
        liutSciPanel.setLayout(liutSciPanelLayout);
        liutSciPanelLayout.setHorizontalGroup(
            liutSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, liutSciPanelLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(sheildRestorationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(sheildCapacityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        liutSciPanelLayout.setVerticalGroup(
            liutSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(liutSciPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(liutSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sheildRestorationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sheildCapacityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        energyToggleButton1.setText("<html>Energy<br />Weapon<br />Training 1</html>");
        energyToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                energyToggleButton1ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        energyToggleButton2.setText("<html>Energy<br />Weapon<br />Training 2</html>");
        energyToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                energyToggleButton2ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        energyToggleButton3.setText("<html>Energy<br />Weapon<br />Training 3</html>");
        energyToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                energyToggleButton3ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        jLabel8.setText("|");

        jLabel9.setText("|");

        javax.swing.GroupLayout energyTrainingPanelLayout = new javax.swing.GroupLayout(energyTrainingPanel);
        energyTrainingPanel.setLayout(energyTrainingPanelLayout);
        energyTrainingPanelLayout.setHorizontalGroup(
            energyTrainingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(energyTrainingPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(energyTrainingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(energyToggleButton3)
                    .addComponent(energyToggleButton2)
                    .addComponent(energyToggleButton1))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, energyTrainingPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(energyTrainingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, energyTrainingPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, energyTrainingPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );
        energyTrainingPanelLayout.setVerticalGroup(
            energyTrainingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(energyTrainingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(energyToggleButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(energyToggleButton2)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(energyToggleButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        projectileToggleButton1.setText("<html>Projectile<br />Weapon<br />Training 1</html>");
        projectileToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectileToggleButton1ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        projectileToggleButton2.setText("<html>Projectile<br />Weapon<br />Training 2</html>");
        projectileToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectileToggleButton2ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        projectileToggleButton3.setText("<html>Projectile<br />Weapon<br />Training 3</html>");
        projectileToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectileToggleButton3ActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        jLabel4.setText("|");

        jLabel5.setText("|");

        javax.swing.GroupLayout torpedoTrainingPanelLayout = new javax.swing.GroupLayout(torpedoTrainingPanel);
        torpedoTrainingPanel.setLayout(torpedoTrainingPanelLayout);
        torpedoTrainingPanelLayout.setHorizontalGroup(
            torpedoTrainingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(torpedoTrainingPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(torpedoTrainingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projectileToggleButton3)
                    .addComponent(projectileToggleButton2)
                    .addComponent(projectileToggleButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, torpedoTrainingPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(torpedoTrainingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, torpedoTrainingPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, torpedoTrainingPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );
        torpedoTrainingPanelLayout.setVerticalGroup(
            torpedoTrainingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(torpedoTrainingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(projectileToggleButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(projectileToggleButton2)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(projectileToggleButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout liutTacPanelLayout = new javax.swing.GroupLayout(liutTacPanel);
        liutTacPanel.setLayout(liutTacPanelLayout);
        liutTacPanelLayout.setHorizontalGroup(
            liutTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, liutTacPanelLayout.createSequentialGroup()
                .addGap(0, 174, Short.MAX_VALUE)
                .addComponent(torpedoTrainingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(liutTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(liutTacPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(energyTrainingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(156, Short.MAX_VALUE)))
        );
        liutTacPanelLayout.setVerticalGroup(
            liutTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(liutTacPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(torpedoTrainingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(liutTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(liutTacPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(energyTrainingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout lieutenantPanelLayout = new javax.swing.GroupLayout(lieutenantPanel);
        lieutenantPanel.setLayout(lieutenantPanelLayout);
        lieutenantPanelLayout.setHorizontalGroup(
            lieutenantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lieutenantPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(liutEngPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(liutSciPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(liutTacPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        lieutenantPanelLayout.setVerticalGroup(
            lieutenantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lieutenantPanelLayout.createSequentialGroup()
                .addGroup(lieutenantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(liutEngPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(liutSciPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(liutTacPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        ltCommanderPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        hullPlatingToggleButton.setText("Hull Plating");
        hullPlatingToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hullPlatingToggleButtonActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        energizedPlatingToggleButton.setText("<html>Energized<br />Hull<br />Plating</html>");
        energizedPlatingToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                energizedPlatingToggleButtonActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        ablativePlatingToggleButton.setText("<html>Ablative<br />Hull<br />Plating</html>");
        ablativePlatingToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ablativePlatingToggleButtonActionPerformed(evt);
                printSkillInfo(evt);
            }
        });

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel30.setText("/");

        jLabel31.setText("\\");

            javax.swing.GroupLayout platingPanelLayout = new javax.swing.GroupLayout(platingPanel);
            platingPanel.setLayout(platingPanelLayout);
            platingPanelLayout.setHorizontalGroup(
                platingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(platingPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(platingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, platingPanelLayout.createSequentialGroup()
                            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, platingPanelLayout.createSequentialGroup()
                            .addComponent(energizedPlatingToggleButton)
                            .addGap(14, 14, 14)
                            .addComponent(ablativePlatingToggleButton)))
                    .addContainerGap())
                .addGroup(platingPanelLayout.createSequentialGroup()
                    .addGap(50, 50, 50)
                    .addComponent(hullPlatingToggleButton)
                    .addGap(0, 0, Short.MAX_VALUE))
            );
            platingPanelLayout.setVerticalGroup(
                platingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(platingPanelLayout.createSequentialGroup()
                    .addContainerGap(28, Short.MAX_VALUE)
                    .addComponent(hullPlatingToggleButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(platingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel31)
                        .addComponent(jLabel30))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(platingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ablativePlatingToggleButton)
                        .addComponent(energizedPlatingToggleButton))
                    .addGap(102, 102, 102))
            );

            damageControlToggleButton1.setText("<html>Damage<br />Control 1</html>");
            damageControlToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    damageControlToggleButton1ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            damageControlToggleButton2.setText("<html>Damage<br />Control 2</html>");
            damageControlToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    damageControlToggleButton2ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            damageControlToggleButton3.setText("<html>Damage<br />Control 3</html>");
            damageControlToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    damageControlToggleButton3ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            jLabel34.setText("|");

            jLabel35.setText("|");

            javax.swing.GroupLayout damageControlPanelLayout = new javax.swing.GroupLayout(damageControlPanel);
            damageControlPanel.setLayout(damageControlPanelLayout);
            damageControlPanelLayout.setHorizontalGroup(
                damageControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(damageControlPanelLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addGroup(damageControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(damageControlToggleButton3)
                        .addComponent(damageControlToggleButton2)
                        .addComponent(damageControlToggleButton1))
                    .addContainerGap(18, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, damageControlPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(damageControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, damageControlPanelLayout.createSequentialGroup()
                            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(48, 48, 48))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, damageControlPanelLayout.createSequentialGroup()
                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51))))
            );
            damageControlPanelLayout.setVerticalGroup(
                damageControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(damageControlPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(damageControlToggleButton1)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel34)
                    .addGap(18, 18, 18)
                    .addComponent(damageControlToggleButton2)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel35)
                    .addGap(18, 18, 18)
                    .addComponent(damageControlToggleButton3)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout liutCommandEngPanelLayout = new javax.swing.GroupLayout(liutCommandEngPanel);
            liutCommandEngPanel.setLayout(liutCommandEngPanelLayout);
            liutCommandEngPanelLayout.setHorizontalGroup(
                liutCommandEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, liutCommandEngPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(platingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                    .addComponent(damageControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            );
            liutCommandEngPanelLayout.setVerticalGroup(
                liutCommandEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(liutCommandEngPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(liutCommandEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(damageControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(platingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );

            targetingToggleButton1.setText("<html>Targeting<br />Weapon<br />Expertise 1</html>");
            targetingToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    targetingToggleButton1ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            targetingToggleButton2.setText("<html>Targeting<br />Weapon<br />Expertise 2</html>");
            targetingToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    targetingToggleButton2ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            targetingToggleButton3.setText("<html>Targeting<br />Weapon<br />Expertise 3</html>");
            targetingToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    targetingToggleButton3ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            jLabel20.setText("|");

            jLabel21.setText("|");

            javax.swing.GroupLayout targetingPanelLayout = new javax.swing.GroupLayout(targetingPanel);
            targetingPanel.setLayout(targetingPanelLayout);
            targetingPanelLayout.setHorizontalGroup(
                targetingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(targetingPanelLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addGroup(targetingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(targetingToggleButton3)
                        .addComponent(targetingToggleButton2)
                        .addComponent(targetingToggleButton1))
                    .addContainerGap(18, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, targetingPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(targetingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, targetingPanelLayout.createSequentialGroup()
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(48, 48, 48))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, targetingPanelLayout.createSequentialGroup()
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51))))
            );
            targetingPanelLayout.setVerticalGroup(
                targetingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(targetingPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(targetingToggleButton1)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel20)
                    .addGap(18, 18, 18)
                    .addComponent(targetingToggleButton2)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel21)
                    .addGap(18, 18, 18)
                    .addComponent(targetingToggleButton3)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            defensiveManuveringToggleButton1.setText("<html>Defensive<br />Weapon<br />Manuvering 1</html>");
            defensiveManuveringToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    defensiveManuveringToggleButton1ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            defensiveManuveringToggleButton2.setText("<html>Defensive<br />Weapon<br />Manuvering 2</html>");
            defensiveManuveringToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    defensiveManuveringToggleButton2ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            defensiveManuveringToggleButton3.setText("<html>Defensive<br />Weapon<br />Manuvering 3</html>");
            defensiveManuveringToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    defensiveManuveringToggleButton3ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            jLabel22.setText("|");

            jLabel23.setText("|");

            javax.swing.GroupLayout defensiveManuveringPanelLayout = new javax.swing.GroupLayout(defensiveManuveringPanel);
            defensiveManuveringPanel.setLayout(defensiveManuveringPanelLayout);
            defensiveManuveringPanelLayout.setHorizontalGroup(
                defensiveManuveringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(defensiveManuveringPanelLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addGroup(defensiveManuveringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(defensiveManuveringToggleButton3)
                        .addComponent(defensiveManuveringToggleButton2)
                        .addComponent(defensiveManuveringToggleButton1))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, defensiveManuveringPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(defensiveManuveringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, defensiveManuveringPanelLayout.createSequentialGroup()
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(48, 48, 48))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, defensiveManuveringPanelLayout.createSequentialGroup()
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51))))
            );
            defensiveManuveringPanelLayout.setVerticalGroup(
                defensiveManuveringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(defensiveManuveringPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(defensiveManuveringToggleButton1)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel22)
                    .addGap(18, 18, 18)
                    .addComponent(defensiveManuveringToggleButton2)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel23)
                    .addGap(18, 18, 18)
                    .addComponent(defensiveManuveringToggleButton3)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout liutCommandTacPanelLayout = new javax.swing.GroupLayout(liutCommandTacPanel);
            liutCommandTacPanel.setLayout(liutCommandTacPanelLayout);
            liutCommandTacPanelLayout.setHorizontalGroup(
                liutCommandTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, liutCommandTacPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(targetingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                    .addComponent(defensiveManuveringPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            );
            liutCommandTacPanelLayout.setVerticalGroup(
                liutCommandTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(liutCommandTacPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(liutCommandTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(targetingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(defensiveManuveringPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );

            sheildRegenerationToggleButton1.setText("<html>Sheild<br />Regeneration 1</html>");
            sheildRegenerationToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sheildRegenerationToggleButton1ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            sheildRegenerationToggleButton2.setText("<html>Sheild<br />Regeneration 2</html>");
            sheildRegenerationToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sheildRegenerationToggleButton2ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            sheildRegenerationToggleButton3.setText("<html>Sheild<br />Regeneration 3</html>");
            sheildRegenerationToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sheildRegenerationToggleButton3ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            jLabel24.setText("|");

            jLabel25.setText("|");

            javax.swing.GroupLayout sheildRegenerationPanelLayout = new javax.swing.GroupLayout(sheildRegenerationPanel);
            sheildRegenerationPanel.setLayout(sheildRegenerationPanelLayout);
            sheildRegenerationPanelLayout.setHorizontalGroup(
                sheildRegenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(sheildRegenerationPanelLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addGroup(sheildRegenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sheildRegenerationToggleButton3)
                        .addComponent(sheildRegenerationToggleButton2)
                        .addComponent(sheildRegenerationToggleButton1))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildRegenerationPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sheildRegenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildRegenerationPanelLayout.createSequentialGroup()
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(48, 48, 48))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildRegenerationPanelLayout.createSequentialGroup()
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51))))
            );
            sheildRegenerationPanelLayout.setVerticalGroup(
                sheildRegenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(sheildRegenerationPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sheildRegenerationToggleButton1)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel24)
                    .addGap(18, 18, 18)
                    .addComponent(sheildRegenerationToggleButton2)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel25)
                    .addGap(18, 18, 18)
                    .addComponent(sheildRegenerationToggleButton3)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            sheildHardnessToggleButton1.setText("<html>Sheild<br />Hardness 1</html>");
            sheildHardnessToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sheildHardnessToggleButton1ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            sheildHardnessToggleButton2.setText("<html>Sheild<br />Hardness 2</html>");
            sheildHardnessToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sheildHardnessToggleButton2ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            sheildHardnessToggleButton3.setText("<html>Sheild<br />Hardness 3</html>");
            sheildHardnessToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sheildHardnessToggleButton3ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            jLabel26.setText("|");

            jLabel27.setText("|");

            javax.swing.GroupLayout sheildHardnessPanelLayout = new javax.swing.GroupLayout(sheildHardnessPanel);
            sheildHardnessPanel.setLayout(sheildHardnessPanelLayout);
            sheildHardnessPanelLayout.setHorizontalGroup(
                sheildHardnessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(sheildHardnessPanelLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addGroup(sheildHardnessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sheildHardnessToggleButton3)
                        .addComponent(sheildHardnessToggleButton2)
                        .addComponent(sheildHardnessToggleButton1))
                    .addContainerGap(18, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildHardnessPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sheildHardnessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildHardnessPanelLayout.createSequentialGroup()
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(48, 48, 48))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildHardnessPanelLayout.createSequentialGroup()
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51))))
            );
            sheildHardnessPanelLayout.setVerticalGroup(
                sheildHardnessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(sheildHardnessPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sheildHardnessToggleButton1)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel26)
                    .addGap(18, 18, 18)
                    .addComponent(sheildHardnessToggleButton2)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel27)
                    .addGap(18, 18, 18)
                    .addComponent(sheildHardnessToggleButton3)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout liutCommandSciPanelLayout = new javax.swing.GroupLayout(liutCommandSciPanel);
            liutCommandSciPanel.setLayout(liutCommandSciPanelLayout);
            liutCommandSciPanelLayout.setHorizontalGroup(
                liutCommandSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, liutCommandSciPanelLayout.createSequentialGroup()
                    .addGap(73, 73, 73)
                    .addComponent(sheildRegenerationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                    .addComponent(sheildHardnessPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(41, 41, 41))
            );
            liutCommandSciPanelLayout.setVerticalGroup(
                liutCommandSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(liutCommandSciPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(liutCommandSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sheildRegenerationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sheildHardnessPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );

            javax.swing.GroupLayout ltCommanderPanelLayout = new javax.swing.GroupLayout(ltCommanderPanel);
            ltCommanderPanel.setLayout(ltCommanderPanelLayout);
            ltCommanderPanelLayout.setHorizontalGroup(
                ltCommanderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ltCommanderPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(liutCommandEngPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(liutCommandSciPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(liutCommandTacPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(45, 45, 45))
            );
            ltCommanderPanelLayout.setVerticalGroup(
                ltCommanderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ltCommanderPanelLayout.createSequentialGroup()
                    .addComponent(liutCommandEngPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addComponent(liutCommandSciPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(liutCommandTacPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );

            commanderPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

            hullPenToggleButton1.setText("<html>Hull<br />Penatration 1</html>");
            hullPenToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    hullPenToggleButton1ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            hullPenToggleButton2.setText("<html>Hull<br />Penatration 2</html>");
            hullPenToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    hullPenToggleButton2ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            hullPenToggleButton3.setText("<html>Hull<br />Penatration 3</html>");
            hullPenToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    hullPenToggleButton3ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            jLabel28.setText("|");

            jLabel29.setText("|");

            javax.swing.GroupLayout hullPenPanelLayout = new javax.swing.GroupLayout(hullPenPanel);
            hullPenPanel.setLayout(hullPenPanelLayout);
            hullPenPanelLayout.setHorizontalGroup(
                hullPenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(hullPenPanelLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addGroup(hullPenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(hullPenToggleButton3)
                        .addComponent(hullPenToggleButton2)
                        .addComponent(hullPenToggleButton1))
                    .addContainerGap(18, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hullPenPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(hullPenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hullPenPanelLayout.createSequentialGroup()
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(48, 48, 48))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hullPenPanelLayout.createSequentialGroup()
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51))))
            );
            hullPenPanelLayout.setVerticalGroup(
                hullPenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(hullPenPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(hullPenToggleButton1)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel28)
                    .addGap(18, 18, 18)
                    .addComponent(hullPenToggleButton2)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel29)
                    .addGap(18, 18, 18)
                    .addComponent(hullPenToggleButton3)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            sheildPenToggleButton1.setText("<html>Sheild<br />Penatration 1</html>");
            sheildPenToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sheildPenToggleButton1ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            sheildPenToggleButton2.setText("<html>Sheild<br />Penatration 1</html>");
            sheildPenToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sheildPenToggleButton2ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            sheildPenToggleButton3.setText("<html>Sheild<br />Penatration 3</html>");
            sheildPenToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sheildPenToggleButton3ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            jLabel40.setText("|");

            jLabel41.setText("|");

            javax.swing.GroupLayout sheildPenPanelLayout = new javax.swing.GroupLayout(sheildPenPanel);
            sheildPenPanel.setLayout(sheildPenPanelLayout);
            sheildPenPanelLayout.setHorizontalGroup(
                sheildPenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(sheildPenPanelLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addGroup(sheildPenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sheildPenToggleButton3)
                        .addComponent(sheildPenToggleButton2)
                        .addComponent(sheildPenToggleButton1))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildPenPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sheildPenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildPenPanelLayout.createSequentialGroup()
                            .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(48, 48, 48))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildPenPanelLayout.createSequentialGroup()
                            .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51))))
            );
            sheildPenPanelLayout.setVerticalGroup(
                sheildPenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(sheildPenPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sheildPenToggleButton1)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel40)
                    .addGap(18, 18, 18)
                    .addComponent(sheildPenToggleButton2)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel41)
                    .addGap(18, 18, 18)
                    .addComponent(sheildPenToggleButton3)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout commandTacPanelLayout = new javax.swing.GroupLayout(commandTacPanel);
            commandTacPanel.setLayout(commandTacPanelLayout);
            commandTacPanelLayout.setHorizontalGroup(
                commandTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, commandTacPanelLayout.createSequentialGroup()
                    .addGap(0, 174, Short.MAX_VALUE)
                    .addComponent(sheildPenPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(commandTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(commandTacPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(hullPenPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(156, Short.MAX_VALUE)))
            );
            commandTacPanelLayout.setVerticalGroup(
                commandTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(commandTacPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sheildPenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
                .addGroup(commandTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(commandTacPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(hullPenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap()))
            );

            EPSToggleButton1.setText("<html>Electro-Plasma<br />System Flow 1</html>");
            EPSToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    EPSToggleButton1ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            EPSToggleButton2.setText("<html>Electro-plasma<br />System Flow 2</html>");
            EPSToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    EPSToggleButton2ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            impulseShuntToggleButton.setText("<html>Full Impulse<br />Energy Shunt</html>");
            impulseShuntToggleButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    impulseShuntToggleButtonActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            jLabel48.setText("|");

            jLabel49.setText("|");

            javax.swing.GroupLayout epsPanelLayout = new javax.swing.GroupLayout(epsPanel);
            epsPanel.setLayout(epsPanelLayout);
            epsPanelLayout.setHorizontalGroup(
                epsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(epsPanelLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addGroup(epsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(impulseShuntToggleButton)
                        .addComponent(EPSToggleButton2)
                        .addComponent(EPSToggleButton1))
                    .addGap(18, 18, 18))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, epsPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(epsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, epsPanelLayout.createSequentialGroup()
                            .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(48, 48, 48))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, epsPanelLayout.createSequentialGroup()
                            .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51))))
            );
            epsPanelLayout.setVerticalGroup(
                epsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(epsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(EPSToggleButton1)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel48)
                    .addGap(18, 18, 18)
                    .addComponent(EPSToggleButton2)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel49)
                    .addGap(18, 18, 18)
                    .addComponent(impulseShuntToggleButton)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            impulseToggleButton1.setText("<html>Impulse<br />Expertise 1</html>");
            impulseToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    impulseToggleButton1ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            impulseToggleButton2.setText("<html>Impulse<br />Expertise 2</html>");
            impulseToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    impulseToggleButton2ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            impulseToggleButton3.setText("<html>Impulse<br />Expertise 3</html>");
            impulseToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    impulseToggleButton3ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            jLabel50.setText("|");

            jLabel51.setText("|");

            javax.swing.GroupLayout impulsePanelLayout = new javax.swing.GroupLayout(impulsePanel);
            impulsePanel.setLayout(impulsePanelLayout);
            impulsePanelLayout.setHorizontalGroup(
                impulsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(impulsePanelLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addGroup(impulsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(impulseToggleButton3)
                        .addComponent(impulseToggleButton2)
                        .addComponent(impulseToggleButton1))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, impulsePanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(impulsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, impulsePanelLayout.createSequentialGroup()
                            .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(48, 48, 48))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, impulsePanelLayout.createSequentialGroup()
                            .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51))))
            );
            impulsePanelLayout.setVerticalGroup(
                impulsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(impulsePanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(impulseToggleButton1)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel50)
                    .addGap(18, 18, 18)
                    .addComponent(impulseToggleButton2)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel51)
                    .addGap(18, 18, 18)
                    .addComponent(impulseToggleButton3)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout commandEngPanelLayout = new javax.swing.GroupLayout(commandEngPanel);
            commandEngPanel.setLayout(commandEngPanelLayout);
            commandEngPanelLayout.setHorizontalGroup(
                commandEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, commandEngPanelLayout.createSequentialGroup()
                    .addContainerGap(218, Short.MAX_VALUE)
                    .addComponent(impulsePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(73, 73, 73))
                .addGroup(commandEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(commandEngPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(epsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(273, Short.MAX_VALUE)))
            );
            commandEngPanelLayout.setVerticalGroup(
                commandEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(impulsePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(commandEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(commandEngPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(epsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap()))
            );

            controlToggleButton1.setText("Control Expertise");
            controlToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    controlToggleButton1ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            controlToggleButton2.setText("<html>Control<br />Expertise 2</html>");
            controlToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    controlToggleButton2ActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            controlAmplificationToggleButton.setText("<html>Control<br />Amplification</html>");
            controlAmplificationToggleButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    controlAmplificationToggleButtonActionPerformed(evt);
                    printSkillInfo(evt);
                }
            });

            jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            jLabel36.setText("/");

            jLabel37.setText("\\");

                javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
                controlPanel.setLayout(controlPanelLayout);
                controlPanelLayout.setHorizontalGroup(
                    controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                                .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                                .addComponent(controlToggleButton2)
                                .addGap(14, 14, 14)
                                .addComponent(controlAmplificationToggleButton)))
                        .addContainerGap())
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(controlToggleButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                );
                controlPanelLayout.setVerticalGroup(
                    controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(controlToggleButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel37)
                            .addComponent(jLabel36))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(controlAmplificationToggleButton)
                            .addComponent(controlToggleButton2))
                        .addGap(102, 102, 102))
                );

                drainToggleButton1.setText("Drain Expertise");
                drainToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        drainToggleButton1ActionPerformed(evt);
                        printSkillInfo(evt);
                    }
                });

                drainToggleButton2.setText("<html>Drain<br />Expertise 2</html>");
                drainToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        drainToggleButton2ActionPerformed(evt);
                        printSkillInfo(evt);
                    }
                });

                drainInfectionToggleButton.setText("<html>Drain<br />Infection</html>");
                drainInfectionToggleButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        drainInfectionToggleButtonActionPerformed(evt);
                        printSkillInfo(evt);
                    }
                });

                jLabel46.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                jLabel46.setText("/");

                jLabel47.setText("\\");

                    javax.swing.GroupLayout drainPanelLayout = new javax.swing.GroupLayout(drainPanel);
                    drainPanel.setLayout(drainPanelLayout);
                    drainPanelLayout.setHorizontalGroup(
                        drainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(drainPanelLayout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(drainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, drainPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, drainPanelLayout.createSequentialGroup()
                                    .addComponent(drainToggleButton2)
                                    .addGap(14, 14, 14)
                                    .addComponent(drainInfectionToggleButton)))
                            .addContainerGap())
                        .addGroup(drainPanelLayout.createSequentialGroup()
                            .addGap(41, 41, 41)
                            .addComponent(drainToggleButton1)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    );
                    drainPanelLayout.setVerticalGroup(
                        drainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(drainPanelLayout.createSequentialGroup()
                            .addContainerGap(19, Short.MAX_VALUE)
                            .addComponent(drainToggleButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(drainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel47)
                                .addComponent(jLabel46))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(drainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(drainInfectionToggleButton)
                                .addComponent(drainToggleButton2))
                            .addGap(102, 102, 102))
                    );

                    javax.swing.GroupLayout commandSciPanelLayout = new javax.swing.GroupLayout(commandSciPanel);
                    commandSciPanel.setLayout(commandSciPanelLayout);
                    commandSciPanelLayout.setHorizontalGroup(
                        commandSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, commandSciPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 209, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(drainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                    );
                    commandSciPanelLayout.setVerticalGroup(
                        commandSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, commandSciPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(commandSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(drainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addContainerGap())
                    );

                    javax.swing.GroupLayout commanderPanelLayout = new javax.swing.GroupLayout(commanderPanel);
                    commanderPanel.setLayout(commanderPanelLayout);
                    commanderPanelLayout.setHorizontalGroup(
                        commanderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, commanderPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(commandEngPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(commandSciPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(commandTacPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(42, 42, 42))
                    );
                    commanderPanelLayout.setVerticalGroup(
                        commanderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(commanderPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(commandEngPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())
                        .addComponent(commandTacPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(commanderPanelLayout.createSequentialGroup()
                            .addComponent(commandSciPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 10, Short.MAX_VALUE))
                    );

                    captainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

                    weaponAmpToggleButton1.setText("<html>Weapon<br />Amplification 1</html>");
                    weaponAmpToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            weaponAmpToggleButton1ActionPerformed(evt);
                            printSkillInfo(evt);
                        }
                    });

                    weaponAmpToggleButton2.setText("<html>Weapon<br />Amplification 2</html>");
                    weaponAmpToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            weaponAmpToggleButton2ActionPerformed(evt);
                            printSkillInfo(evt);
                        }
                    });

                    weaponAmpToggleButton3.setText("<html>Weapon<br />Amplification 3</html>");
                    weaponAmpToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            weaponAmpToggleButton3ActionPerformed(evt);
                            printSkillInfo(evt);
                        }
                    });

                    jLabel38.setText("|");

                    jLabel39.setText("|");

                    javax.swing.GroupLayout weaponAmpPanelLayout = new javax.swing.GroupLayout(weaponAmpPanel);
                    weaponAmpPanel.setLayout(weaponAmpPanelLayout);
                    weaponAmpPanelLayout.setHorizontalGroup(
                        weaponAmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(weaponAmpPanelLayout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addGroup(weaponAmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(weaponAmpToggleButton3)
                                .addComponent(weaponAmpToggleButton2)
                                .addComponent(weaponAmpToggleButton1))
                            .addContainerGap(18, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weaponAmpPanelLayout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(weaponAmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weaponAmpPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(48, 48, 48))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weaponAmpPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(51, 51, 51))))
                    );
                    weaponAmpPanelLayout.setVerticalGroup(
                        weaponAmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(weaponAmpPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(weaponAmpToggleButton1)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel38)
                            .addGap(18, 18, 18)
                            .addComponent(weaponAmpToggleButton2)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel39)
                            .addGap(18, 18, 18)
                            .addComponent(weaponAmpToggleButton3)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    );

                    weaponSpecToggleButton1.setText("<html>Weapon<br />Specialization 1</html>");
                    weaponSpecToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            weaponSpecToggleButton1ActionPerformed(evt);
                            printSkillInfo(evt);
                        }
                    });

                    weaponSpecToggleButton2.setText("<html>Weapon<br />Specialization 2</html>");
                    weaponSpecToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            weaponSpecToggleButton2ActionPerformed(evt);
                            printSkillInfo(evt);
                        }
                    });

                    weaponSpecToggleButton3.setText("<html>Weapon<br />Specialization 3</html>");
                    weaponSpecToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            weaponSpecToggleButton3ActionPerformed(evt);
                            printSkillInfo(evt);
                        }
                    });

                    jLabel42.setText("|");

                    jLabel43.setText("|");

                    javax.swing.GroupLayout weaponSpecPanelLayout = new javax.swing.GroupLayout(weaponSpecPanel);
                    weaponSpecPanel.setLayout(weaponSpecPanelLayout);
                    weaponSpecPanelLayout.setHorizontalGroup(
                        weaponSpecPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(weaponSpecPanelLayout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addGroup(weaponSpecPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(weaponSpecToggleButton3)
                                .addComponent(weaponSpecToggleButton2)
                                .addComponent(weaponSpecToggleButton1))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weaponSpecPanelLayout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(weaponSpecPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weaponSpecPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(48, 48, 48))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weaponSpecPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(51, 51, 51))))
                    );
                    weaponSpecPanelLayout.setVerticalGroup(
                        weaponSpecPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(weaponSpecPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(weaponSpecToggleButton1)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel42)
                            .addGap(18, 18, 18)
                            .addComponent(weaponSpecToggleButton2)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel43)
                            .addGap(18, 18, 18)
                            .addComponent(weaponSpecToggleButton3)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    );

                    javax.swing.GroupLayout captainTacPanelLayout = new javax.swing.GroupLayout(captainTacPanel);
                    captainTacPanel.setLayout(captainTacPanelLayout);
                    captainTacPanelLayout.setHorizontalGroup(
                        captainTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 332, Short.MAX_VALUE)
                        .addGroup(captainTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(captainTacPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(weaponAmpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(weaponSpecPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(40, Short.MAX_VALUE)))
                    );
                    captainTacPanelLayout.setVerticalGroup(
                        captainTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(captainTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(captainTacPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(captainTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(weaponSpecPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(weaponAmpPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap()))
                    );

                    defSubsystemToggleButton.setText("<html>Defensive<br />Subsystem<br />Tuning</html>");
                    defSubsystemToggleButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            defSubsystemToggleButtonActionPerformed(evt);
                            printSkillInfo(evt);
                        }
                    });

                    sheildSubsystemToggleButton.setText("<html>Sheild<br />Subsystem<br />Performance</html>");
                    sheildSubsystemToggleButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            sheildSubsystemToggleButtonActionPerformed(evt);
                            printSkillInfo(evt);
                        }
                    });

                    auxSubsystemToggleButton.setText("<html>Auxilary<br />Subsystem<br />Performance</html>");
                    auxSubsystemToggleButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            auxSubsystemToggleButtonActionPerformed(evt);
                            printSkillInfo(evt);
                        }
                    });

                    jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                    jLabel44.setText("/");

                    jLabel45.setText("\\");

                        javax.swing.GroupLayout defSubsystemPanelLayout = new javax.swing.GroupLayout(defSubsystemPanel);
                        defSubsystemPanel.setLayout(defSubsystemPanelLayout);
                        defSubsystemPanelLayout.setHorizontalGroup(
                            defSubsystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(defSubsystemPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(defSubsystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, defSubsystemPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, defSubsystemPanelLayout.createSequentialGroup()
                                        .addComponent(sheildSubsystemToggleButton)
                                        .addGap(14, 14, 14)
                                        .addComponent(auxSubsystemToggleButton)))
                                .addContainerGap())
                            .addGroup(defSubsystemPanelLayout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(defSubsystemToggleButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                        );
                        defSubsystemPanelLayout.setVerticalGroup(
                            defSubsystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(defSubsystemPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(defSubsystemToggleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(defSubsystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel45)
                                    .addComponent(jLabel44))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(defSubsystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(auxSubsystemToggleButton)
                                    .addComponent(sheildSubsystemToggleButton))
                                .addGap(102, 102, 102))
                        );

                        offSubsystemToggleButton.setText("<html>Offensive<br />Subsystem<br />Tuning</html>");
                        offSubsystemToggleButton.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                offSubsystemToggleButtonActionPerformed(evt);
                                printSkillInfo(evt);
                            }
                        });

                        weaponSubsystemToggleButton.setText("<html>Weapon<br />Subsystem<br />Performance</html>");
                        weaponSubsystemToggleButton.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                weaponSubsystemToggleButtonActionPerformed(evt);
                                printSkillInfo(evt);
                            }
                        });

                        engineSubsystemToggleButton.setText("<html>Engines<br />Subsystem<br />Performance</html>");
                        engineSubsystemToggleButton.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                engineSubsystemToggleButtonActionPerformed(evt);
                                printSkillInfo(evt);
                            }
                        });

                        jLabel56.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                        jLabel56.setText("/");

                        jLabel57.setText("\\");

                            javax.swing.GroupLayout offSubsystemPanelLayout = new javax.swing.GroupLayout(offSubsystemPanel);
                            offSubsystemPanel.setLayout(offSubsystemPanelLayout);
                            offSubsystemPanelLayout.setHorizontalGroup(
                                offSubsystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(offSubsystemPanelLayout.createSequentialGroup()
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(92, 92, 92)
                                    .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap())
                                .addGroup(offSubsystemPanelLayout.createSequentialGroup()
                                    .addGap(41, 41, 41)
                                    .addComponent(offSubsystemToggleButton)
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(offSubsystemPanelLayout.createSequentialGroup()
                                    .addComponent(weaponSubsystemToggleButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(engineSubsystemToggleButton)
                                    .addGap(0, 0, Short.MAX_VALUE))
                            );
                            offSubsystemPanelLayout.setVerticalGroup(
                                offSubsystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(offSubsystemPanelLayout.createSequentialGroup()
                                    .addContainerGap(19, Short.MAX_VALUE)
                                    .addComponent(offSubsystemToggleButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(offSubsystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel57)
                                        .addComponent(jLabel56))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(offSubsystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(engineSubsystemToggleButton)
                                        .addComponent(weaponSubsystemToggleButton))
                                    .addGap(102, 102, 102))
                            );

                            javax.swing.GroupLayout captainEngPanelLayout = new javax.swing.GroupLayout(captainEngPanel);
                            captainEngPanel.setLayout(captainEngPanelLayout);
                            captainEngPanelLayout.setHorizontalGroup(
                                captainEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, captainEngPanelLayout.createSequentialGroup()
                                    .addComponent(defSubsystemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(offSubsystemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 214, Short.MAX_VALUE)
                                    .addGap(2, 2, 2))
                            );
                            captainEngPanelLayout.setVerticalGroup(
                                captainEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, captainEngPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(captainEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(offSubsystemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(defSubsystemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addContainerGap())
                            );

                            partGenToggleButton1.setText("<html>Exotic Particle<br />Generator 1</html>");
                            partGenToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    partGenToggleButton1ActionPerformed(evt);
                                    printSkillInfo(evt);
                                }
                            });

                            partGenToggleButton2.setText("<html>Exotic Particle<br />Generator 2</html>");
                            partGenToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    partGenToggleButton2ActionPerformed(evt);
                                    printSkillInfo(evt);
                                }
                            });

                            partGenToggleButton3.setText("<html>Exotic Particle<br />Generator 3</html>");
                            partGenToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    partGenToggleButton3ActionPerformed(evt);
                                    printSkillInfo(evt);
                                }
                            });

                            jLabel52.setText("|");

                            jLabel53.setText("|");

                            javax.swing.GroupLayout partGenPanelLayout = new javax.swing.GroupLayout(partGenPanel);
                            partGenPanel.setLayout(partGenPanelLayout);
                            partGenPanelLayout.setHorizontalGroup(
                                partGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(partGenPanelLayout.createSequentialGroup()
                                    .addGap(19, 19, 19)
                                    .addGroup(partGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(partGenToggleButton3)
                                        .addComponent(partGenToggleButton2)
                                        .addComponent(partGenToggleButton1))
                                    .addGap(18, 18, 18))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, partGenPanelLayout.createSequentialGroup()
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(partGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, partGenPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(48, 48, 48))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, partGenPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(51, 51, 51))))
                            );
                            partGenPanelLayout.setVerticalGroup(
                                partGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(partGenPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(partGenToggleButton1)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel52)
                                    .addGap(18, 18, 18)
                                    .addComponent(partGenToggleButton2)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel53)
                                    .addGap(18, 18, 18)
                                    .addComponent(partGenToggleButton3)
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            );

                            rangeToggleButton1.setText("<html>Long-Range<br />Targeting<br />Sensors 1</html>");
                            rangeToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    rangeToggleButton1ActionPerformed(evt);
                                    printSkillInfo(evt);
                                }
                            });

                            rangeToggleButton2.setText("<html>Long-Range<br />Targeting<br />Sensors 2</html>");
                            rangeToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    rangeToggleButton2ActionPerformed(evt);
                                    printSkillInfo(evt);
                                }
                            });

                            rangeToggleButton3.setText("<html>Long-Range<br />Targeting<br />Sensors 3</html>");
                            rangeToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    rangeToggleButton3ActionPerformed(evt);
                                    printSkillInfo(evt);
                                }
                            });

                            jLabel54.setText("|");

                            jLabel55.setText("|");

                            javax.swing.GroupLayout rangePanelLayout = new javax.swing.GroupLayout(rangePanel);
                            rangePanel.setLayout(rangePanelLayout);
                            rangePanelLayout.setHorizontalGroup(
                                rangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(rangePanelLayout.createSequentialGroup()
                                    .addGap(19, 19, 19)
                                    .addGroup(rangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(rangeToggleButton3)
                                        .addComponent(rangeToggleButton2)
                                        .addComponent(rangeToggleButton1))
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rangePanelLayout.createSequentialGroup()
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(rangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rangePanelLayout.createSequentialGroup()
                                            .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(48, 48, 48))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rangePanelLayout.createSequentialGroup()
                                            .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(51, 51, 51))))
                            );
                            rangePanelLayout.setVerticalGroup(
                                rangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(rangePanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(rangeToggleButton1)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel54)
                                    .addGap(18, 18, 18)
                                    .addComponent(rangeToggleButton2)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel55)
                                    .addGap(18, 18, 18)
                                    .addComponent(rangeToggleButton3)
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            );

                            javax.swing.GroupLayout captainSciPanelLayout = new javax.swing.GroupLayout(captainSciPanel);
                            captainSciPanel.setLayout(captainSciPanelLayout);
                            captainSciPanelLayout.setHorizontalGroup(
                                captainSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, captainSciPanelLayout.createSequentialGroup()
                                    .addComponent(partGenPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(44, 44, 44)
                                    .addComponent(rangePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap(108, Short.MAX_VALUE))
                            );
                            captainSciPanelLayout.setVerticalGroup(
                                captainSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(captainSciPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(captainSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(partGenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(rangePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addContainerGap())
                            );

                            javax.swing.GroupLayout captainPanelLayout = new javax.swing.GroupLayout(captainPanel);
                            captainPanel.setLayout(captainPanelLayout);
                            captainPanelLayout.setHorizontalGroup(
                                captainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, captainPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(captainEngPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(captainSciPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(57, 57, 57)
                                    .addComponent(captainTacPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            );
                            captainPanelLayout.setVerticalGroup(
                                captainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(captainTacPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(captainEngPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(captainSciPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            );

                            admiralPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

                            tacReadinessToggleButton1.setText("<html>Tactical<br />Readiness 1</html>");
                            tacReadinessToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    tacReadinessToggleButton1ActionPerformed(evt);
                                    printSkillInfo(evt);
                                }
                            });

                            tacReadinessToggleButton2.setText("<html>Tactical<br />Readiness 2</html>");
                            tacReadinessToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    tacReadinessToggleButton2ActionPerformed(evt);
                                    printSkillInfo(evt);
                                }
                            });

                            tacReadinessToggleButton3.setText("<html>Tactical<br />Readiness 3</html>");
                            tacReadinessToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    tacReadinessToggleButton3ActionPerformed(evt);
                                    printSkillInfo(evt);
                                }
                            });

                            jLabel60.setText("|");

                            jLabel61.setText("|");

                            javax.swing.GroupLayout tacReadinessPanelLayout = new javax.swing.GroupLayout(tacReadinessPanel);
                            tacReadinessPanel.setLayout(tacReadinessPanelLayout);
                            tacReadinessPanelLayout.setHorizontalGroup(
                                tacReadinessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(tacReadinessPanelLayout.createSequentialGroup()
                                    .addGap(19, 19, 19)
                                    .addGroup(tacReadinessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tacReadinessToggleButton3)
                                        .addComponent(tacReadinessToggleButton2)
                                        .addComponent(tacReadinessToggleButton1))
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tacReadinessPanelLayout.createSequentialGroup()
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(tacReadinessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tacReadinessPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(48, 48, 48))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tacReadinessPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(51, 51, 51))))
                            );
                            tacReadinessPanelLayout.setVerticalGroup(
                                tacReadinessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(tacReadinessPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(tacReadinessToggleButton1)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel60)
                                    .addGap(18, 18, 18)
                                    .addComponent(tacReadinessToggleButton2)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel61)
                                    .addGap(18, 18, 18)
                                    .addComponent(tacReadinessToggleButton3)
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            );

                            coordinationToggleButton.setText("<html>Coordination<br />Protocols</html>");
                            coordinationToggleButton.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    coordinationToggleButtonActionPerformed(evt);
                                    printSkillInfo(evt);
                                }
                            });

                            defCoordinationToggleButton.setText("<html>Defensive<br />Coordination</html>");
                            defCoordinationToggleButton.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    defCoordinationToggleButtonActionPerformed(evt);
                                    printSkillInfo(evt);
                                }
                            });

                            offCoordinationToggleButton.setText("<html>Offensive<br />Coordination</html>");
                            offCoordinationToggleButton.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    offCoordinationToggleButtonActionPerformed(evt);
                                    printSkillInfo(evt);
                                }
                            });

                            jLabel72.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                            jLabel72.setText("/");

                            jLabel73.setText("\\");

                                javax.swing.GroupLayout coordinationPanelLayout = new javax.swing.GroupLayout(coordinationPanel);
                                coordinationPanel.setLayout(coordinationPanelLayout);
                                coordinationPanelLayout.setHorizontalGroup(
                                    coordinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(coordinationPanelLayout.createSequentialGroup()
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(coordinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, coordinationPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel72, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel73, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, coordinationPanelLayout.createSequentialGroup()
                                                .addComponent(defCoordinationToggleButton)
                                                .addGap(14, 14, 14)
                                                .addComponent(offCoordinationToggleButton)))
                                        .addContainerGap())
                                    .addGroup(coordinationPanelLayout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(coordinationToggleButton)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                );
                                coordinationPanelLayout.setVerticalGroup(
                                    coordinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(coordinationPanelLayout.createSequentialGroup()
                                        .addContainerGap(19, Short.MAX_VALUE)
                                        .addComponent(coordinationToggleButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(coordinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel73)
                                            .addComponent(jLabel72))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(coordinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(offCoordinationToggleButton)
                                            .addComponent(defCoordinationToggleButton))
                                        .addGap(102, 102, 102))
                                );

                                javax.swing.GroupLayout admiralTacPanelLayout = new javax.swing.GroupLayout(admiralTacPanel);
                                admiralTacPanel.setLayout(admiralTacPanelLayout);
                                admiralTacPanelLayout.setHorizontalGroup(
                                    admiralTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, admiralTacPanelLayout.createSequentialGroup()
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(coordinationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tacReadinessPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(1, 1, 1))
                                );
                                admiralTacPanelLayout.setVerticalGroup(
                                    admiralTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(admiralTacPanelLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(admiralTacPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(coordinationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(tacReadinessPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addContainerGap())
                                );

                                warpPotentialToggleButton1.setText("<html>Warp<br />Core Potential 1</html>");
                                warpPotentialToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        warpPotentialToggleButton1ActionPerformed(evt);
                                        printSkillInfo(evt);
                                    }
                                });

                                warpPotentialToggleButton2.setText("<html>Warp Core<br />Potential 2</html>");
                                warpPotentialToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        warpPotentialToggleButton2ActionPerformed(evt);
                                        printSkillInfo(evt);
                                    }
                                });

                                warpEfficiencyToggleButton.setText("<html>Warp Core<br />Efficiency</html>");
                                warpEfficiencyToggleButton.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        warpEfficiencyToggleButtonActionPerformed(evt);
                                        printSkillInfo(evt);
                                    }
                                });

                                jLabel62.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                                jLabel62.setText("/");

                                jLabel63.setText("\\");

                                    javax.swing.GroupLayout warpCorePanelLayout = new javax.swing.GroupLayout(warpCorePanel);
                                    warpCorePanel.setLayout(warpCorePanelLayout);
                                    warpCorePanelLayout.setHorizontalGroup(
                                        warpCorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(warpCorePanelLayout.createSequentialGroup()
                                            .addGroup(warpCorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(warpCorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, warpCorePanelLayout.createSequentialGroup()
                                                        .addComponent(jLabel62, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel63, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, warpCorePanelLayout.createSequentialGroup()
                                                        .addComponent(warpPotentialToggleButton2)
                                                        .addGap(14, 14, 14)
                                                        .addComponent(warpEfficiencyToggleButton)))
                                                .addGroup(warpCorePanelLayout.createSequentialGroup()
                                                    .addGap(40, 40, 40)
                                                    .addComponent(warpPotentialToggleButton1)))
                                            .addGap(0, 0, Short.MAX_VALUE))
                                    );
                                    warpCorePanelLayout.setVerticalGroup(
                                        warpCorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(warpCorePanelLayout.createSequentialGroup()
                                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(warpPotentialToggleButton1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(warpCorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel63)
                                                .addComponent(jLabel62))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(warpCorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(warpEfficiencyToggleButton)
                                                .addComponent(warpPotentialToggleButton2))
                                            .addGap(102, 102, 102))
                                    );

                                    engReadinessToggleButton1.setText("<html>Engineering<br />Readiness 1</html>");
                                    engReadinessToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            engReadinessToggleButton1ActionPerformed(evt);
                                            printSkillInfo(evt);
                                        }
                                    });

                                    engReadinessToggleButton2.setText("<html>Engineering<br />Readiness 2</html>");
                                    engReadinessToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            engReadinessToggleButton2ActionPerformed(evt);
                                            printSkillInfo(evt);
                                        }
                                    });

                                    engReadinessToggleButton3.setText("<html>Engineering<br />Readiness 3</html>");
                                    engReadinessToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            engReadinessToggleButton3ActionPerformed(evt);
                                            printSkillInfo(evt);
                                        }
                                    });

                                    jLabel70.setText("|");

                                    jLabel71.setText("|");

                                    javax.swing.GroupLayout engReadinessPanelLayout = new javax.swing.GroupLayout(engReadinessPanel);
                                    engReadinessPanel.setLayout(engReadinessPanelLayout);
                                    engReadinessPanelLayout.setHorizontalGroup(
                                        engReadinessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(engReadinessPanelLayout.createSequentialGroup()
                                            .addGap(19, 19, 19)
                                            .addGroup(engReadinessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(engReadinessToggleButton3)
                                                .addComponent(engReadinessToggleButton2)
                                                .addComponent(engReadinessToggleButton1))
                                            .addGap(18, 18, 18))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, engReadinessPanelLayout.createSequentialGroup()
                                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(engReadinessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, engReadinessPanelLayout.createSequentialGroup()
                                                    .addComponent(jLabel70, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(48, 48, 48))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, engReadinessPanelLayout.createSequentialGroup()
                                                    .addComponent(jLabel71, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(51, 51, 51))))
                                    );
                                    engReadinessPanelLayout.setVerticalGroup(
                                        engReadinessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(engReadinessPanelLayout.createSequentialGroup()
                                            .addContainerGap()
                                            .addComponent(engReadinessToggleButton1)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel70)
                                            .addGap(18, 18, 18)
                                            .addComponent(engReadinessToggleButton2)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel71)
                                            .addGap(18, 18, 18)
                                            .addComponent(engReadinessToggleButton3)
                                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    );

                                    javax.swing.GroupLayout admiralEngPanelLayout = new javax.swing.GroupLayout(admiralEngPanel);
                                    admiralEngPanel.setLayout(admiralEngPanelLayout);
                                    admiralEngPanelLayout.setHorizontalGroup(
                                        admiralEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, admiralEngPanelLayout.createSequentialGroup()
                                            .addGap(2, 2, 2)
                                            .addComponent(warpCorePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 209, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(engReadinessPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18))
                                    );
                                    admiralEngPanelLayout.setVerticalGroup(
                                        admiralEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, admiralEngPanelLayout.createSequentialGroup()
                                            .addContainerGap()
                                            .addGroup(admiralEngPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(engReadinessPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(warpCorePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addContainerGap())
                                    );

                                    sciReadinessToggleButton1.setText("<html>Scientific<br />Readiness 1</html>");
                                    sciReadinessToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            sciReadinessToggleButton1ActionPerformed(evt);
                                            printSkillInfo(evt);
                                        }
                                    });

                                    sciReadinessToggleButton2.setText("<html>Scientific<br />Readiness 2</html>");
                                    sciReadinessToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            sciReadinessToggleButton2ActionPerformed(evt);
                                            printSkillInfo(evt);
                                        }
                                    });

                                    sciReadinessToggleButton3.setText("<html>Scientific<br />Readiness 3</html>");
                                    sciReadinessToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            sciReadinessToggleButton3ActionPerformed(evt);
                                            printSkillInfo(evt);
                                        }
                                    });

                                    jLabel66.setText("|");

                                    jLabel67.setText("|");

                                    javax.swing.GroupLayout sciReadinessPanelLayout = new javax.swing.GroupLayout(sciReadinessPanel);
                                    sciReadinessPanel.setLayout(sciReadinessPanelLayout);
                                    sciReadinessPanelLayout.setHorizontalGroup(
                                        sciReadinessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(sciReadinessPanelLayout.createSequentialGroup()
                                            .addGap(19, 19, 19)
                                            .addGroup(sciReadinessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(sciReadinessToggleButton3)
                                                .addComponent(sciReadinessToggleButton2)
                                                .addComponent(sciReadinessToggleButton1))
                                            .addGap(18, 18, 18))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sciReadinessPanelLayout.createSequentialGroup()
                                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(sciReadinessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sciReadinessPanelLayout.createSequentialGroup()
                                                    .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(48, 48, 48))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sciReadinessPanelLayout.createSequentialGroup()
                                                    .addComponent(jLabel67, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(51, 51, 51))))
                                    );
                                    sciReadinessPanelLayout.setVerticalGroup(
                                        sciReadinessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(sciReadinessPanelLayout.createSequentialGroup()
                                            .addContainerGap()
                                            .addComponent(sciReadinessToggleButton1)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel66)
                                            .addGap(18, 18, 18)
                                            .addComponent(sciReadinessToggleButton2)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel67)
                                            .addGap(18, 18, 18)
                                            .addComponent(sciReadinessToggleButton3)
                                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    );

                                    sheildMasteryToggleButton.setText("Sheild Mastery");
                                    sheildMasteryToggleButton.addActionListener(new java.awt.event.ActionListener() {
                                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            sheildMasteryToggleButtonActionPerformed(evt);
                                            printSkillInfo(evt);
                                        }
                                    });

                                    sheildAbsorptionToggleButton.setText("<html>Sheild<br />Absorption</html>");
                                    sheildAbsorptionToggleButton.addActionListener(new java.awt.event.ActionListener() {
                                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            sheildAbsorptionToggleButtonActionPerformed(evt);
                                            printSkillInfo(evt);
                                        }
                                    });

                                    sheildReflectionToggleButton.setText("<html>Sheild<br />Reflection</html>");
                                    sheildReflectionToggleButton.addActionListener(new java.awt.event.ActionListener() {
                                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            sheildReflectionToggleButtonActionPerformed(evt);
                                            printSkillInfo(evt);
                                        }
                                    });

                                    jLabel64.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                                    jLabel64.setText("/");

                                    jLabel65.setText("\\");

                                        javax.swing.GroupLayout sheildMasteryPanelLayout = new javax.swing.GroupLayout(sheildMasteryPanel);
                                        sheildMasteryPanel.setLayout(sheildMasteryPanelLayout);
                                        sheildMasteryPanelLayout.setHorizontalGroup(
                                            sheildMasteryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(sheildMasteryPanelLayout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(sheildMasteryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildMasteryPanelLayout.createSequentialGroup()
                                                        .addGroup(sheildMasteryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildMasteryPanelLayout.createSequentialGroup()
                                                                .addComponent(jLabel64, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(jLabel65, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildMasteryPanelLayout.createSequentialGroup()
                                                                .addComponent(sheildAbsorptionToggleButton)
                                                                .addGap(14, 14, 14)
                                                                .addComponent(sheildReflectionToggleButton)))
                                                        .addContainerGap())
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sheildMasteryPanelLayout.createSequentialGroup()
                                                        .addComponent(sheildMasteryToggleButton)
                                                        .addGap(49, 49, 49))))
                                        );
                                        sheildMasteryPanelLayout.setVerticalGroup(
                                            sheildMasteryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(sheildMasteryPanelLayout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(sheildMasteryToggleButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(sheildMasteryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel65)
                                                    .addComponent(jLabel64))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(sheildMasteryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(sheildReflectionToggleButton)
                                                    .addComponent(sheildAbsorptionToggleButton))
                                                .addGap(102, 102, 102))
                                        );

                                        javax.swing.GroupLayout admiralSciPanelLayout = new javax.swing.GroupLayout(admiralSciPanel);
                                        admiralSciPanel.setLayout(admiralSciPanelLayout);
                                        admiralSciPanelLayout.setHorizontalGroup(
                                            admiralSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, admiralSciPanelLayout.createSequentialGroup()
                                                .addGap(37, 37, 37)
                                                .addComponent(sciReadinessPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(28, 28, 28)
                                                .addComponent(sheildMasteryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, Short.MAX_VALUE)
                                                .addGap(29, 29, 29))
                                        );
                                        admiralSciPanelLayout.setVerticalGroup(
                                            admiralSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(admiralSciPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(admiralSciPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(sheildMasteryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(sciReadinessPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addContainerGap())
                                        );

                                        javax.swing.GroupLayout admiralPanelLayout = new javax.swing.GroupLayout(admiralPanel);
                                        admiralPanel.setLayout(admiralPanelLayout);
                                        admiralPanelLayout.setHorizontalGroup(
                                            admiralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, admiralPanelLayout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(admiralEngPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(admiralSciPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(42, 42, 42)
                                                .addComponent(admiralTacPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap())
                                        );
                                        admiralPanelLayout.setVerticalGroup(
                                            admiralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(admiralTacPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(admiralEngPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(admiralSciPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        );

                                        javax.swing.GroupLayout skillPlacementPanelLayout = new javax.swing.GroupLayout(skillPlacementPanel);
                                        skillPlacementPanel.setLayout(skillPlacementPanelLayout);
                                        skillPlacementPanelLayout.setHorizontalGroup(
                                            skillPlacementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, skillPlacementPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(skillPlacementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(admiralPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lieutenantPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(ltCommanderPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(commanderPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(captainPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addContainerGap())
                                        );
                                        skillPlacementPanelLayout.setVerticalGroup(
                                            skillPlacementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(skillPlacementPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(lieutenantPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ltCommanderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(commanderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(captainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(admiralPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        );

                                        additionalAbilitiesPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

                                        engineeringBoostComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Subsystem Repair", "Battery Expertise" }));
                                        engineeringBoostComboBox1.setEnabled(false);

                                        engineeringBoostComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maximum Hull Capacity", "Damage Resistance Rating" }));
                                        engineeringBoostComboBox2.setEnabled(false);

                                        engineeringBoostComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Engine Subsystem", "Auxilary Subsystem" }));
                                        engineeringBoostComboBox3.setEnabled(false);

                                        engineeringBoostComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Weapon Subsystem", "Sheild Subsystem" }));
                                        engineeringBoostComboBox4.setEnabled(false);

                                        scienceBoostComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sector Space Travel Speed", "Transwarp Cooldown Reductions" }));
                                        scienceBoostComboBox1.setEnabled(false);

                                        scienceBoostComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maximize Sheild Capacity", "Sheild Hardness" }));
                                        scienceBoostComboBox2.setEnabled(false);

                                        scienceBoostComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Subsystem Energy Drain Resistance", "Sheild Drain Resistance" }));
                                        scienceBoostComboBox3.setEnabled(false);

                                        scienceBoostComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Starship Perception", "Control Resistance" }));
                                        scienceBoostComboBox4.setEnabled(false);

                                        tacticalBoostComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Projectile Crit Chance", "Projectile Crit Severity" }));
                                        tacticalBoostComboBox1.setEnabled(false);

                                        tacticalBoostComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Starship Stealth", "Starship Threat Control" }));
                                        tacticalBoostComboBox2.setEnabled(false);

                                        tacticalBoostComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Energy Crit Chance", "Energy Crit Severity" }));
                                        tacticalBoostComboBox3.setEnabled(false);

                                        tacticalBoostComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hangary Weaponry", "Pet Health" }));
                                        tacticalBoostComboBox4.setEnabled(false);

                                        windowRadioButton.setText("<html>Probability<br />Window</html>");
                                        windowRadioButton.setActionCommand("window");
                                        windowRadioButton.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                sciUltimateRadioButtonsActionPerformed(evt);
                                            }
                                        });

                                        manipulationRadioButton.setText("<html>Extended<br />Manipulation</html>");
                                        manipulationRadioButton.setActionCommand("manipulation");
                                        manipulationRadioButton.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                sciUltimateRadioButtonsActionPerformed(evt);
                                            }
                                        });

                                        shellRadioButton.setText("<html>Probability<br />Shell</html>");
                                        shellRadioButton.setActionCommand("shell");
                                        shellRadioButton.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                sciUltimateRadioButtonsActionPerformed(evt);
                                            }
                                        });

                                        sciUltimateCheckBox.setText("Probability Manipulation");
                                        sciUltimateCheckBox.setEnabled(false);

                                        engUltimateCheckBox.setText("EPS Corruption");
                                        engUltimateCheckBox.setEnabled(false);

                                        tacUltimateCheckBox.setText("Focused Frenzy");
                                        tacUltimateCheckBox.setEnabled(false);

                                        wakeningRadioButton.setText("Weakening");
                                        wakeningRadioButton.setActionCommand("window");
                                        wakeningRadioButton.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                engUltimateRadioButtonsActionPerformed(evt);
                                            }
                                        });

                                        explosionlRadioButton.setText("Explosion");
                                        explosionlRadioButton.setActionCommand("shell");
                                        explosionlRadioButton.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                engUltimateRadioButtonsActionPerformed(evt);
                                            }
                                        });

                                        enhancedRadioButton.setText("Enhanced");
                                        enhancedRadioButton.setActionCommand("manipulation");
                                        enhancedRadioButton.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                engUltimateRadioButtonsActionPerformed(evt);
                                            }
                                        });

                                        reactionRadioButton.setText("<html>Frenzied<br />Reactions</html>");
                                        reactionRadioButton.setActionCommand("window");
                                        reactionRadioButton.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                tacUltimateRadioButtonsActionPerformed(evt);
                                            }
                                        });

                                        assaultRadioButton.setText("<html>Frenzied<br />Assault</html>");
                                        assaultRadioButton.setActionCommand("shell");
                                        assaultRadioButton.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                tacUltimateRadioButtonsActionPerformed(evt);
                                            }
                                        });

                                        teamRadioButton.setText("<html>Team<br />Frenzy</html>");
                                        teamRadioButton.setActionCommand("manipulation");
                                        teamRadioButton.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                tacUltimateRadioButtonsActionPerformed(evt);
                                            }
                                        });

                                        javax.swing.GroupLayout additionalAbilitiesPanelLayout = new javax.swing.GroupLayout(additionalAbilitiesPanel);
                                        additionalAbilitiesPanel.setLayout(additionalAbilitiesPanelLayout);
                                        additionalAbilitiesPanelLayout.setHorizontalGroup(
                                            additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(additionalAbilitiesPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(engineeringBoostComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(scienceBoostComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tacticalBoostComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(scienceBoostComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(additionalAbilitiesPanelLayout.createSequentialGroup()
                                                        .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(additionalAbilitiesPanelLayout.createSequentialGroup()
                                                                .addComponent(engineeringBoostComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addComponent(tacticalBoostComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(scienceBoostComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(engineeringBoostComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(18, 18, 18)
                                                                .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addComponent(scienceBoostComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(engineeringBoostComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(tacticalBoostComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                            .addComponent(tacticalBoostComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(18, 18, 18)
                                                        .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(sciUltimateCheckBox)
                                                            .addComponent(engUltimateCheckBox)
                                                            .addComponent(tacUltimateCheckBox))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(additionalAbilitiesPanelLayout.createSequentialGroup()
                                                                .addComponent(wakeningRadioButton)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(explosionlRadioButton)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(enhancedRadioButton))
                                                            .addGroup(additionalAbilitiesPanelLayout.createSequentialGroup()
                                                                .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addGroup(additionalAbilitiesPanelLayout.createSequentialGroup()
                                                                        .addComponent(windowRadioButton)
                                                                        .addGap(6, 6, 6)
                                                                        .addComponent(shellRadioButton))
                                                                    .addGroup(additionalAbilitiesPanelLayout.createSequentialGroup()
                                                                        .addComponent(reactionRadioButton)
                                                                        .addGap(18, 18, 18)
                                                                        .addComponent(assaultRadioButton)))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addComponent(manipulationRadioButton)
                                                                    .addComponent(teamRadioButton))))))
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        );
                                        additionalAbilitiesPanelLayout.setVerticalGroup(
                                            additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(additionalAbilitiesPanelLayout.createSequentialGroup()
                                                .addGap(33, 33, 33)
                                                .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(additionalAbilitiesPanelLayout.createSequentialGroup()
                                                        .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(engineeringBoostComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(engineeringBoostComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(engineeringBoostComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(engineeringBoostComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(33, 33, 33)
                                                        .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(scienceBoostComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(scienceBoostComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(scienceBoostComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(scienceBoostComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(sciUltimateCheckBox)
                                                            .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(windowRadioButton)
                                                                .addComponent(manipulationRadioButton)
                                                                .addComponent(shellRadioButton))))
                                                    .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(engUltimateCheckBox)
                                                        .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(wakeningRadioButton)
                                                            .addComponent(enhancedRadioButton)
                                                            .addComponent(explosionlRadioButton))))
                                                .addGap(40, 40, 40)
                                                .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(tacticalBoostComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tacticalBoostComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tacticalBoostComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tacticalBoostComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tacUltimateCheckBox)
                                                    .addGroup(additionalAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(reactionRadioButton)
                                                        .addComponent(teamRadioButton)
                                                        .addComponent(assaultRadioButton)))
                                                .addContainerGap(43, Short.MAX_VALUE))
                                        );

                                        javax.swing.GroupLayout skillPanelLayout = new javax.swing.GroupLayout(skillPanel);
                                        skillPanel.setLayout(skillPanelLayout);
                                        skillPanelLayout.setHorizontalGroup(
                                            skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(skillPlacementPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(additionalAbilitiesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        );
                                        skillPanelLayout.setVerticalGroup(
                                            skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(skillPanelLayout.createSequentialGroup()
                                                .addComponent(skillPlacementPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(additionalAbilitiesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        );

                                        mainScrollPane.setViewportView(skillPanel);

                                        getContentPane().add(mainScrollPane, java.awt.BorderLayout.LINE_START);

                                        skillCaptionPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                                        skillCaptionPanel.setMaximumSize(new java.awt.Dimension(1317, 71));
                                        skillCaptionPanel.setMinimumSize(new java.awt.Dimension(400, 71));
                                        skillCaptionPanel.setPreferredSize(new java.awt.Dimension(1317, 71));

                                        skillPointsLabel.setText("46 Skill Points");

                                        tacPointsUsedLabel.setText("0 Tactical Points Used");

                                        sciPointsUsedLabel.setText("0 Science Points Used");

                                        engPointsUsedLabel.setText("0 Engineering Points Used");

                                        javax.swing.GroupLayout pointsPanelLayout = new javax.swing.GroupLayout(pointsPanel);
                                        pointsPanel.setLayout(pointsPanelLayout);
                                        pointsPanelLayout.setHorizontalGroup(
                                            pointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pointsPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(skillPointsLabel)
                                                .addGap(43, 43, 43)
                                                .addComponent(tacPointsUsedLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(sciPointsUsedLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(engPointsUsedLabel)
                                                .addContainerGap(739, Short.MAX_VALUE))
                                        );
                                        pointsPanelLayout.setVerticalGroup(
                                            pointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pointsPanelLayout.createSequentialGroup()
                                                .addGroup(pointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(skillPointsLabel)
                                                    .addComponent(tacPointsUsedLabel)
                                                    .addComponent(sciPointsUsedLabel)
                                                    .addComponent(engPointsUsedLabel))
                                                .addContainerGap(13, Short.MAX_VALUE))
                                        );

                                        jLabel1.setText("Engineering");

                                        javax.swing.GroupLayout engLabelPanelLayout = new javax.swing.GroupLayout(engLabelPanel);
                                        engLabelPanel.setLayout(engLabelPanelLayout);
                                        engLabelPanelLayout.setHorizontalGroup(
                                            engLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(engLabelPanelLayout.createSequentialGroup()
                                                .addGap(90, 90, 90)
                                                .addComponent(jLabel1)
                                                .addContainerGap(103, Short.MAX_VALUE))
                                        );
                                        engLabelPanelLayout.setVerticalGroup(
                                            engLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, engLabelPanelLayout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel1)
                                                .addContainerGap())
                                        );

                                        jLabel58.setText("Tactical");

                                        javax.swing.GroupLayout tacLabelPanelLayout = new javax.swing.GroupLayout(tacLabelPanel);
                                        tacLabelPanel.setLayout(tacLabelPanelLayout);
                                        tacLabelPanelLayout.setHorizontalGroup(
                                            tacLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tacLabelPanelLayout.createSequentialGroup()
                                                .addContainerGap(193, Short.MAX_VALUE)
                                                .addComponent(jLabel58)
                                                .addGap(87, 87, 87))
                                        );
                                        tacLabelPanelLayout.setVerticalGroup(
                                            tacLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(tacLabelPanelLayout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel58))
                                        );

                                        sciLabelPanel.setPreferredSize(new java.awt.Dimension(242, 36));

                                        jLabel2.setText("Science");

                                        javax.swing.GroupLayout sciLabelPanelLayout = new javax.swing.GroupLayout(sciLabelPanel);
                                        sciLabelPanel.setLayout(sciLabelPanelLayout);
                                        sciLabelPanelLayout.setHorizontalGroup(
                                            sciLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sciLabelPanelLayout.createSequentialGroup()
                                                .addContainerGap(124, Short.MAX_VALUE)
                                                .addComponent(jLabel2)
                                                .addGap(82, 82, 82))
                                        );
                                        sciLabelPanelLayout.setVerticalGroup(
                                            sciLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sciLabelPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addContainerGap())
                                        );

                                        clearPointsButton.setText("Clear Points");
                                        clearPointsButton.setEnabled(false);
                                        clearPointsButton.setMargin(new java.awt.Insets(1, 14, 1, 14));
                                        clearPointsButton.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                clearPointsButtonActionPerformed(evt);
                                            }
                                        });

                                        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                                        jPanel1.setLayout(jPanel1Layout);
                                        jPanel1Layout.setHorizontalGroup(
                                            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(clearPointsButton)
                                                .addContainerGap())
                                        );
                                        jPanel1Layout.setVerticalGroup(
                                            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(clearPointsButton)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        );

                                        javax.swing.GroupLayout skillCaptionPanelLayout = new javax.swing.GroupLayout(skillCaptionPanel);
                                        skillCaptionPanel.setLayout(skillCaptionPanelLayout);
                                        skillCaptionPanelLayout.setHorizontalGroup(
                                            skillCaptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, skillCaptionPanelLayout.createSequentialGroup()
                                                .addGroup(skillCaptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(pointsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, skillCaptionPanelLayout.createSequentialGroup()
                                                        .addGap(98, 98, 98)
                                                        .addComponent(engLabelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(sciLabelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(143, 143, 143)
                                                        .addComponent(tacLabelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap())
                                        );
                                        skillCaptionPanelLayout.setVerticalGroup(
                                            skillCaptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(skillCaptionPanelLayout.createSequentialGroup()
                                                .addGroup(skillCaptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(skillCaptionPanelLayout.createSequentialGroup()
                                                        .addComponent(pointsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addGroup(skillCaptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(skillCaptionPanelLayout.createSequentialGroup()
                                                                .addGroup(skillCaptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                    .addComponent(tacLabelPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                    .addComponent(sciLabelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                            .addComponent(engLabelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                                    .addGroup(skillCaptionPanelLayout.createSequentialGroup()
                                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(0, 0, Short.MAX_VALUE)))
                                                .addContainerGap())
                                        );

                                        getContentPane().add(skillCaptionPanel, java.awt.BorderLayout.PAGE_START);

                                        fileMenu.setText("File");

                                        jMenuItem1.setText("Save");
                                        jMenuItem1.setEnabled(false);
                                        fileMenu.add(jMenuItem1);

                                        jMenuItem2.setText("Load");
                                        jMenuItem2.setEnabled(false);
                                        fileMenu.add(jMenuItem2);

                                        menuBar.add(fileMenu);

                                        UIMenu.setText("UI");

                                        resizableCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
                                        resizableCheckBoxMenuItem.setText("Resizable");
                                        resizableCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                resizableCheckBoxMenuItemActionPerformed(evt);
                                            }
                                        });
                                        UIMenu.add(resizableCheckBoxMenuItem);

                                        menuBar.add(UIMenu);

                                        aboutMenu.setText("About");

                                        aboutMenuItem.setText("About");
                                        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                aboutMenuItemActionPerformed(evt);
                                            }
                                        });
                                        aboutMenu.add(aboutMenuItem);

                                        menuBar.add(aboutMenu);

                                        setJMenuBar(menuBar);

                                        pack();
                                    }// </editor-fold>//GEN-END:initComponents

    private void hullRestorationToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hullRestorationToggleButton1ActionPerformed
        
        final boolean isSelected = hullRestorationToggleButton1.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && hullRestoration == 1 && !willDisrupt(0))
        {
            this.hullRestoration--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && hullRestoration == 0)
        {
            this.hullRestoration++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            this.hullRestorationToggleButton1.setSelected(!isSelected);
        
    }//GEN-LAST:event_hullRestorationToggleButton1ActionPerformed

    private void hullRestorationToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hullRestorationToggleButton2ActionPerformed
        final boolean isSelected = hullRestorationToggleButton2.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && hullRestoration == 2 && !willDisrupt(0))
        {
            this.hullRestoration--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && hullRestoration == 1)
        {
            this.hullRestoration++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            this.hullRestorationToggleButton2.setSelected(!isSelected);
    }//GEN-LAST:event_hullRestorationToggleButton2ActionPerformed

    private void hullRestorationToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hullRestorationToggleButton3ActionPerformed
        final boolean isSelected = hullRestorationToggleButton3.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && hullRestoration == 3 && !willDisrupt(0))
        {
            this.hullRestoration--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && hullRestoration == 2)
        {
            this.hullRestoration++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            this.hullRestorationToggleButton3.setSelected(!isSelected);
    }//GEN-LAST:event_hullRestorationToggleButton3ActionPerformed

    private void hullCapacityToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hullCapacityToggleButton1ActionPerformed
        final JToggleButton currentButton = this.hullCapacityToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.hullCapacity == 1 && !willDisrupt(0))
        {
            this.hullCapacity--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && hullCapacity == 0)
        {
            this.hullCapacity++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_hullCapacityToggleButton1ActionPerformed

    private void hullCapacityToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hullCapacityToggleButton2ActionPerformed
        final JToggleButton currentButton = this.hullCapacityToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.hullCapacity == 2 && !willDisrupt(0))
        {
            this.hullCapacity--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && hullCapacity == 1)
        {
            this.hullCapacity++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_hullCapacityToggleButton2ActionPerformed

    private void hullCapacityToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hullCapacityToggleButton3ActionPerformed
        final JToggleButton currentButton = this.hullCapacityToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.hullCapacity == 3 && !willDisrupt(0))
        {
            this.hullCapacity--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && hullCapacity == 2)
        {
            this.hullCapacity++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_hullCapacityToggleButton3ActionPerformed

    private void sheildRestorationToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildRestorationToggleButton1ActionPerformed
        final JToggleButton currentButton = this.sheildRestorationToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildRestoration == 1 && !willDisrupt(0))
        {
            sheildRestoration--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && sheildRestoration == 0)
        {
            sheildRestoration++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildRestorationToggleButton1ActionPerformed

    private void sheildRestorationToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildRestorationToggleButton2ActionPerformed
        final JToggleButton currentButton = this.sheildRestorationToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildRestoration == 2 && !willDisrupt(0))
        {
            sheildRestoration--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && sheildRestoration == 1)
        {
            sheildRestoration++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildRestorationToggleButton2ActionPerformed

    private void sheildRestorationToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildRestorationToggleButton3ActionPerformed
        final JToggleButton currentButton = this.sheildRestorationToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildRestoration == 3 && !willDisrupt(0))
        {
            sheildRestoration--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && sheildRestoration == 2)
        {
            sheildRestoration++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildRestorationToggleButton3ActionPerformed

    private void printSkillInfo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printSkillInfo
        this.skillPointsLabel.setText(this.skillPoints+" Skill Points");
        this.tacPointsUsedLabel.setText(this.spentOnTactical + " Tactical Points Used");
        this.sciPointsUsedLabel.setText(this.spentOnScience + " Science Points Used");
        this.engPointsUsedLabel.setText(this.spentOnEngineering + " Engineering Points Used");
        
        if(spentOnEngineering >= 5)
        {
            this.engineeringBoostComboBox1.setEnabled(true);
            
            if(spentOnEngineering >= 10)
            {
                this.engineeringBoostComboBox2.setEnabled(true);
            
                if(spentOnEngineering >= 15)
                {
                    this.engineeringBoostComboBox3.setEnabled(true);
                    
                    if(spentOnEngineering >= 20)
                    {
                        this.engineeringBoostComboBox4.setEnabled(true);
                        
                        if(spentOnEngineering >= 25)
                        {
                            this.engUltimateCheckBox.setSelected(true);
                            additionalEngUltimate = spentOnEngineering - 25; 
                        }
                        else
                            this.engUltimateCheckBox.setSelected(true);
                    }
                    else
                        this.engineeringBoostComboBox4.setEnabled(true);
                }
                else
                    this.engineeringBoostComboBox3.setEnabled(false);
            }
            else
                this.engineeringBoostComboBox2.setEnabled(false);
        }
        else
            this.engineeringBoostComboBox1.setEnabled(false);
        
        if(spentOnScience >= 5)
        {
            this.scienceBoostComboBox1.setEnabled(true);
            
            if(spentOnScience >= 10)
            {
                this.scienceBoostComboBox2.setEnabled(true);
            
                if(spentOnScience >= 15)
                {
                    this.scienceBoostComboBox3.setEnabled(true);
                    
                    if(spentOnScience >= 20)
                    {
                        this.scienceBoostComboBox4.setEnabled(true);
                        
                        if(spentOnScience >= 25)
                        {
                            this.sciUltimateCheckBox.setSelected(true);
                            additionalSciUltimate = spentOnScience - 25; 
                        }
                        else
                            this.sciUltimateCheckBox.setSelected(false);
                    }
                    else
                        this.scienceBoostComboBox4.setEnabled(false);
                }
                else
                    this.scienceBoostComboBox3.setEnabled(false);
            }
            else
                this.scienceBoostComboBox2.setEnabled(false);
        }
        else
            this.scienceBoostComboBox1.setEnabled(false);
        
        if(spentOnTactical >= 5)
        {
            this.tacticalBoostComboBox1.setEnabled(true);
            
            if(spentOnTactical >= 10)
            {
                this.tacticalBoostComboBox2.setEnabled(true);
            
                if(spentOnTactical >= 15)
                {
                    this.tacticalBoostComboBox3.setEnabled(true);
                    
                    if(spentOnTactical >= 20)
                    {
                        this.tacticalBoostComboBox4.setEnabled(true);
                        
                        if(spentOnTactical >= 25)
                        {
                            this.tacUltimateCheckBox.setSelected(true);
                            additionalTacUltimate = spentOnTactical - 25; 
                        }
                        else
                            this.tacUltimateCheckBox.setSelected(false);
                    }
                    else
                        this.tacticalBoostComboBox4.setEnabled(false);
                }
                else
                    this.tacticalBoostComboBox3.setEnabled(false);
            }
            else
                this.tacticalBoostComboBox2.setEnabled(false);
        }
        else
            this.tacticalBoostComboBox1.setEnabled(false);
    }//GEN-LAST:event_printSkillInfo

    private void sheildCapactiyToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildCapactiyToggleButton1ActionPerformed
        final JToggleButton currentButton = this.sheildCapactiyToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildCapacity == 1 && !willDisrupt(0))
        {
            sheildCapacity--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && sheildCapacity == 0)
        {
            sheildCapacity++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildCapactiyToggleButton1ActionPerformed

    private void sheildCapactiyToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildCapactiyToggleButton2ActionPerformed
        final JToggleButton currentButton = this.sheildCapactiyToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildCapacity == 2 && !willDisrupt(0))
        {
            sheildCapacity--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && sheildCapacity == 1)
        {
            sheildCapacity++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildCapactiyToggleButton2ActionPerformed

    private void sheildCapactiyToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildCapactiyToggleButton3ActionPerformed
        final JToggleButton currentButton = this.sheildCapactiyToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildCapacity == 3 && !willDisrupt(0))
        {
            sheildCapacity--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && sheildCapacity == 2)
        {
            sheildCapacity++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildCapactiyToggleButton3ActionPerformed

    private void energyToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_energyToggleButton1ActionPerformed
        final JToggleButton currentButton = this.energyToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.energyTraining == 1 && !willDisrupt(0))
        {
            energyTraining--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && energyTraining == 0)
        {
            energyTraining++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_energyToggleButton1ActionPerformed

    private void energyToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_energyToggleButton2ActionPerformed
        final JToggleButton currentButton = this.energyToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.energyTraining == 2 && !willDisrupt(0))
        {
            energyTraining--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && energyTraining == 1)
        {
            energyTraining++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_energyToggleButton2ActionPerformed

    private void energyToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_energyToggleButton3ActionPerformed
        final JToggleButton currentButton = this.energyToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.energyTraining == 3 && !willDisrupt(0))
        {
            energyTraining--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && energyTraining == 2)
        {
            energyTraining++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_energyToggleButton3ActionPerformed

    private void projectileToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectileToggleButton1ActionPerformed
        final JToggleButton currentButton = this.projectileToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.projectileTraining == 1 && !willDisrupt(0))
        {
            projectileTraining--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && projectileTraining == 0)
        {
            projectileTraining++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_projectileToggleButton1ActionPerformed

    private void projectileToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectileToggleButton2ActionPerformed
        final JToggleButton currentButton = this.projectileToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.projectileTraining == 2 && !willDisrupt(0))
        {
            projectileTraining--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && projectileTraining == 1)
        {
            projectileTraining++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_projectileToggleButton2ActionPerformed

    private void projectileToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectileToggleButton3ActionPerformed
        final JToggleButton currentButton = this.projectileToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.projectileTraining == 3 && !willDisrupt(0))
        {
            projectileTraining--;
            spentOn.set(0, spentOn.get(0)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(this.skillPoints > 0 && projectileTraining == 2)
        {
            projectileTraining++;
            spentOn.set(0, spentOn.get(0)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_projectileToggleButton3ActionPerformed

    private void damageControlToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_damageControlToggleButton1ActionPerformed
        final JToggleButton currentButton = this.damageControlToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.damageControl == 1 && !willDisrupt(1))
        {
            this.damageControl--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && damageControl == 0)
        {
            this.damageControl++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_damageControlToggleButton1ActionPerformed

    private void damageControlToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_damageControlToggleButton2ActionPerformed
        final JToggleButton currentButton = this.damageControlToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && !willDisrupt(1) && this.damageControl == 2)
        {
            this.damageControl--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && damageControl == 1)
        {
            this.damageControl++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_damageControlToggleButton2ActionPerformed

    private void damageControlToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_damageControlToggleButton3ActionPerformed
        final JToggleButton currentButton = this.damageControlToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && !willDisrupt(1) && this.damageControl == 3)
        {
            this.damageControl--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && damageControl == 2)
        {
            this.damageControl++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_damageControlToggleButton3ActionPerformed

    private void hullPlatingToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hullPlatingToggleButtonActionPerformed
        final JToggleButton currentButton = this.hullPlatingToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && !this.ablativePlating && !this.energizedPlating && !willDisrupt(1))
        {
            this.hullPlating = false;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && !this.hullPlating)
        {
            this.hullPlating = true;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_hullPlatingToggleButtonActionPerformed

    private void energizedPlatingToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_energizedPlatingToggleButtonActionPerformed
        final JToggleButton currentButton = this.energizedPlatingToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.energizedPlating && !willDisrupt(1))
        {
            this.energizedPlating = false;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && this.hullPlating)
        {
            this.energizedPlating = true;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_energizedPlatingToggleButtonActionPerformed

    private void ablativePlatingToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ablativePlatingToggleButtonActionPerformed
        final JToggleButton currentButton = this.ablativePlatingToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.ablativePlating && !willDisrupt(1))
        {
            this.ablativePlating = false;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && this.hullPlating)
        {
            this.ablativePlating = true;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_ablativePlatingToggleButtonActionPerformed

    private void sheildRegenerationToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildRegenerationToggleButton1ActionPerformed
        final JToggleButton currentButton = this.sheildRegenerationToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildRegeneration == 1 && !willDisrupt(1))
        {
            this.sheildRegeneration--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && sheildRegeneration == 0)
        {
            this.sheildRegeneration++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildRegenerationToggleButton1ActionPerformed

    private void sheildRegenerationToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildRegenerationToggleButton2ActionPerformed
        final JToggleButton currentButton = this.sheildRegenerationToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildRegeneration == 2 && !willDisrupt(1))
        {
            this.sheildRegeneration--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && sheildRegeneration == 1)
        {
            this.sheildRegeneration++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildRegenerationToggleButton2ActionPerformed

    private void sheildRegenerationToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildRegenerationToggleButton3ActionPerformed
        final JToggleButton currentButton = this.sheildRegenerationToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildRegeneration == 3 && !willDisrupt(1))
        {
            this.sheildRegeneration--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && sheildRegeneration == 2)
        {
            this.sheildRegeneration++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildRegenerationToggleButton3ActionPerformed

    private void sheildHardnessToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildHardnessToggleButton1ActionPerformed
        final JToggleButton currentButton = this.sheildHardnessToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildHardness == 1 && !willDisrupt(1))
        {
            this.sheildHardness--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && sheildHardness == 0)
        {
            this.sheildHardness++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildHardnessToggleButton1ActionPerformed

    private void sheildHardnessToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildHardnessToggleButton2ActionPerformed
        final JToggleButton currentButton = this.sheildHardnessToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildHardness == 2 && !willDisrupt(1))
        {
            this.sheildHardness--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && sheildHardness == 1)
        {
            this.sheildHardness++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildHardnessToggleButton2ActionPerformed

    private void sheildHardnessToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildHardnessToggleButton3ActionPerformed
        final JToggleButton currentButton = this.sheildHardnessToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildHardness == 3 && !willDisrupt(1))
        {
            this.sheildHardness--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && sheildHardness == 2)
        {
            this.sheildHardness++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildHardnessToggleButton3ActionPerformed

    private void targetingToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetingToggleButton1ActionPerformed
        final JToggleButton currentButton = this.targetingToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.targeting == 1 && !willDisrupt(1))
        {
            this.targeting--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && targeting == 0)
        {
            this.targeting++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_targetingToggleButton1ActionPerformed

    private void targetingToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetingToggleButton2ActionPerformed
        final JToggleButton currentButton = this.targetingToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.targeting == 2 && !willDisrupt(1))
        {
            this.targeting--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && targeting == 1)
        {
            this.targeting++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_targetingToggleButton2ActionPerformed

    private void targetingToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetingToggleButton3ActionPerformed
        final JToggleButton currentButton = this.targetingToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.targeting == 3 && !willDisrupt(1))
        {
            this.targeting--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && targeting == 2)
        {
            this.targeting++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_targetingToggleButton3ActionPerformed

    private void defensiveManuveringToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defensiveManuveringToggleButton1ActionPerformed
        final JToggleButton currentButton = this.defensiveManuveringToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.defensiveManuvering == 1 && !willDisrupt(1))
        {
            this.defensiveManuvering--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && defensiveManuvering == 0)
        {
            this.defensiveManuvering++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_defensiveManuveringToggleButton1ActionPerformed

    private void defensiveManuveringToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defensiveManuveringToggleButton2ActionPerformed
        final JToggleButton currentButton = this.defensiveManuveringToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.defensiveManuvering == 2 && !willDisrupt(1))
        {
            this.defensiveManuvering--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && defensiveManuvering == 1)
        {
            this.defensiveManuvering++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_defensiveManuveringToggleButton2ActionPerformed

    private void defensiveManuveringToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defensiveManuveringToggleButton3ActionPerformed
        final JToggleButton currentButton = this.defensiveManuveringToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.defensiveManuvering == 3 && !willDisrupt(1))
        {
            this.defensiveManuvering--;
            spentOn.set(1, spentOn.get(1)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceLiuCommander() && this.skillPoints > 0 && defensiveManuvering == 2)
        {
            this.defensiveManuvering++;
            spentOn.set(1, spentOn.get(1)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_defensiveManuveringToggleButton3ActionPerformed

    private void EPSToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EPSToggleButton1ActionPerformed
        final JToggleButton currentButton = this.EPSToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.EPS == 1 && !impulseShunt && !willDisrupt(2))
        {
            this.EPS--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && EPS == 0)
        {
            this.EPS++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_EPSToggleButton1ActionPerformed

    private void EPSToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EPSToggleButton2ActionPerformed
        final JToggleButton currentButton = this.EPSToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.EPS == 2 && !impulseShunt && !willDisrupt(2))
        {
            this.EPS--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && EPS == 1)
        {
            this.EPS++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_EPSToggleButton2ActionPerformed

    private void impulseShuntToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impulseShuntToggleButtonActionPerformed
        final JToggleButton currentButton = this.impulseShuntToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && impulseShunt && !willDisrupt(2))
        {
            impulseShunt = false;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && EPS == 2)
        {
            impulseShunt = true;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_impulseShuntToggleButtonActionPerformed

    private void impulseToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impulseToggleButton1ActionPerformed
        final JToggleButton currentButton = this.impulseToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.impulse == 1 && !willDisrupt(2))
        {
            this.impulse--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && impulse == 0)
        {
            this.impulse++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_impulseToggleButton1ActionPerformed

    private void impulseToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impulseToggleButton2ActionPerformed
        final JToggleButton currentButton = this.impulseToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.impulse == 2 && !willDisrupt(2))
        {
            this.impulse--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && impulse == 1)
        {
            this.impulse++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_impulseToggleButton2ActionPerformed

    private void impulseToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impulseToggleButton3ActionPerformed
        final JToggleButton currentButton = this.impulseToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.impulse == 3 && !willDisrupt(2))
        {
            this.impulse--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && impulse == 2)
        {
            this.impulse++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_impulseToggleButton3ActionPerformed

    private void controlToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlToggleButton1ActionPerformed
        final JToggleButton currentButton = this.controlToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.control == 1 && !this.controlAmplification && !willDisrupt(2))
        {
            this.control--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && this.control == 0)
        {
            this.control++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_controlToggleButton1ActionPerformed

    private void controlToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlToggleButton2ActionPerformed
        final JToggleButton currentButton = this.controlToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.control == 2 && !willDisrupt(2))
        {
            this.control--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && this.control == 1)
        {
            this.control++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_controlToggleButton2ActionPerformed

    private void controlAmplificationToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlAmplificationToggleButtonActionPerformed
        final JToggleButton currentButton = this.controlAmplificationToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.controlAmplification && !willDisrupt(2))
        {
            this.controlAmplification = false;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && control >= 1)
        {
            this.controlAmplification = true;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_controlAmplificationToggleButtonActionPerformed

    private void drainToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drainToggleButton1ActionPerformed
        final JToggleButton currentButton = this.drainToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.drain == 1 && !this.drainInfection && !willDisrupt(2))
        {
            this.drain--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && this.drain == 0)
        {
            this.drain++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_drainToggleButton1ActionPerformed

    private void drainToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drainToggleButton2ActionPerformed
        final JToggleButton currentButton = this.drainToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.drain == 2 && !willDisrupt(2))
        {
            this.drain--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && this.drain == 1)
        {
            this.drain++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_drainToggleButton2ActionPerformed

    private void drainInfectionToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drainInfectionToggleButtonActionPerformed
        final JToggleButton currentButton = this.drainInfectionToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.drainInfection && !willDisrupt(2))
        {
            this.drainInfection = false;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && drain >= 1)
        {
            this.drainInfection = true;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_drainInfectionToggleButtonActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        //System.out.println("Frame Resized ("+this.getWidth()+", "+this.getHeight()+")");
        
        //The skillCaptionPanel wont resize properly
        if(this.getWidth() < this.INITIAL_WIDTH || this.getWidth() > this.lastWidth) 
        {
            //this.skillPlacementPanel.setPreferredSize(new java.awt.Dimension(this.getWidth()-45, this.getHeight()));
            //this.skillPlacementPanel.revalidate();
            this.mainScrollPane.setPreferredSize(new java.awt.Dimension(this.getWidth()-45, mainScrollPane.getHeight()));  
            //this.skillCaptionPanel.setMaximumSize(new java.awt.Dimension(skillCaptionPanel.getWidth()-45, this.skillCaptionPanel.getHeight()));
            //this.skillCaptionPanel.setPreferredSize(new java.awt.Dimension(skillCaptionPanel.getWidth()-45, this.skillCaptionPanel.getHeight()));
            this.skillPlacementPanel.revalidate();
            //this.skillCaptionPanel.revalidate();
            this.revalidate();
            lastWidth = this.getWidth();
            
            //this.mainScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        }
        
        //this.skillPanel.setMinimumSize(new java.awt.Dimension(this.getWidth(), this.getHeight()));
        /*if(610 < this.getHeight())
        {
            this.contentPanel.setPreferredSize(new java.awt.Dimension(this.getWidth(), this.getHeight()));
            this.contentPanel.revalidate();
        
            this.skillPanel.setPreferredSize(new java.awt.Dimension(this.getWidth(), this.getHeight()));
            this.skillPanel.revalidate();
            
            this.mainScrollPane.setPreferredSize(new java.awt.Dimension(this.getWidth(), this.getHeight()));
            this.mainScrollPane.revalidate();
        }*/
        
        //this.mainScrollPane.setMinimumSize(new java.awt.Dimension(this.getWidth(), this.getHeight()));
        
        
        
        
        
    }//GEN-LAST:event_formComponentResized

    private void resizableCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizableCheckBoxMenuItemActionPerformed
        this.setResizable(!this.isResizable());
    }//GEN-LAST:event_resizableCheckBoxMenuItemActionPerformed

    private void hullPenToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hullPenToggleButton1ActionPerformed
        final JToggleButton currentButton = this.hullPenToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.hullPen == 1 && !willDisrupt(2))
        {
            this.hullPen--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && hullPen == 0)
        {
            this.hullPen++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_hullPenToggleButton1ActionPerformed

    private void hullPenToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hullPenToggleButton2ActionPerformed
        final JToggleButton currentButton = this.hullPenToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.hullPen == 2 && !willDisrupt(2))
        {
            this.hullPen--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && hullPen == 1)
        {
            this.hullPen++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_hullPenToggleButton2ActionPerformed

    private void hullPenToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hullPenToggleButton3ActionPerformed
        final JToggleButton currentButton = this.hullPenToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.hullPen == 3 && !willDisrupt(2))
        {
            this.hullPen--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && hullPen == 2)
        {
            this.hullPen++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_hullPenToggleButton3ActionPerformed

    private void sheildPenToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildPenToggleButton1ActionPerformed
        final JToggleButton currentButton = this.sheildPenToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildPen == 1 && !willDisrupt(2))
        {
            this.sheildPen--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && sheildPen == 0)
        {
            this.sheildPen++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildPenToggleButton1ActionPerformed

    private void sheildPenToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildPenToggleButton2ActionPerformed
        final JToggleButton currentButton = this.sheildPenToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildPen == 2 && !willDisrupt(2))
        {
            this.sheildPen--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && sheildPen == 1)
        {
            this.sheildPen++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildPenToggleButton2ActionPerformed

    private void sheildPenToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildPenToggleButton3ActionPerformed
        final JToggleButton currentButton = this.sheildPenToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sheildPen == 3 && !willDisrupt(2))
        {
            this.sheildPen--;
            spentOn.set(2, spentOn.get(2)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCommander() && this.skillPoints > 0 && sheildPen == 2)
        {
            this.sheildPen++;
            spentOn.set(2, spentOn.get(2)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildPenToggleButton3ActionPerformed

    private void defSubsystemToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defSubsystemToggleButtonActionPerformed
        final JToggleButton currentButton = this.defSubsystemToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && !this.sheildSubsystem && !this.auxSubsystem && !willDisrupt(3))
        {
            this.defSubsystem = false;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && !this.defSubsystem)
        {
            this.defSubsystem = true;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_defSubsystemToggleButtonActionPerformed

    private void sheildSubsystemToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildSubsystemToggleButtonActionPerformed
        final JToggleButton currentButton = this.sheildSubsystemToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && sheildSubsystem && !willDisrupt(3))
        {
            this.sheildSubsystem = false;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && this.defSubsystem)
        {
            this.sheildSubsystem = true;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildSubsystemToggleButtonActionPerformed

    private void auxSubsystemToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_auxSubsystemToggleButtonActionPerformed
        final JToggleButton currentButton = this.auxSubsystemToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && auxSubsystem && !willDisrupt(3))
        {
            this.auxSubsystem = false;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && this.defSubsystem)
        {
            this.auxSubsystem = true;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_auxSubsystemToggleButtonActionPerformed

    private void offSubsystemToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offSubsystemToggleButtonActionPerformed
        final JToggleButton currentButton = this.offSubsystemToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && !this.engSubsystem && !this.wepSubsystem && !willDisrupt(3))
        {
            this.offSubsystem = false;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && !this.offSubsystem)
        {
            this.offSubsystem = true;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_offSubsystemToggleButtonActionPerformed

    private void weaponSubsystemToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponSubsystemToggleButtonActionPerformed
        final JToggleButton currentButton = this.weaponSubsystemToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.wepSubsystem && !willDisrupt(3))
        {
            this.wepSubsystem = false;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && this.offSubsystem)
        {
            this.wepSubsystem = true;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_weaponSubsystemToggleButtonActionPerformed

    private void engineSubsystemToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engineSubsystemToggleButtonActionPerformed
        final JToggleButton currentButton = this.engineSubsystemToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.engSubsystem && !willDisrupt(3))
        {
            this.engSubsystem = false;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && this.offSubsystem)
        {
            this.engSubsystem = true;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_engineSubsystemToggleButtonActionPerformed

    private void partGenToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partGenToggleButton1ActionPerformed
        final JToggleButton currentButton = this.partGenToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.partGen == 1 && !willDisrupt(3))
        {
            this.partGen--;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && partGen == 0)
        {
            this.partGen++;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_partGenToggleButton1ActionPerformed

    private void partGenToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partGenToggleButton2ActionPerformed
        final JToggleButton currentButton = this.partGenToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.partGen == 2 && !willDisrupt(3))
        {
            this.partGen--;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && partGen == 1)
        {
            this.partGen++;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_partGenToggleButton2ActionPerformed

    private void partGenToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partGenToggleButton3ActionPerformed
        final JToggleButton currentButton = this.partGenToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.partGen == 3 && !willDisrupt(3))
        {
            this.partGen--;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && partGen == 2)
        {
            this.partGen++;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_partGenToggleButton3ActionPerformed

    private void rangeToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeToggleButton1ActionPerformed
        final JToggleButton currentButton = this.rangeToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sensorRange == 1 && !willDisrupt(3))
        {
            this.sensorRange--;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && sensorRange == 0)
        {
            this.sensorRange++;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_rangeToggleButton1ActionPerformed

    private void rangeToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeToggleButton2ActionPerformed
        final JToggleButton currentButton = this.rangeToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sensorRange == 2 && !willDisrupt(3))
        {
            this.sensorRange--;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && sensorRange == 1)
        {
            this.sensorRange++;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_rangeToggleButton2ActionPerformed

    private void rangeToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeToggleButton3ActionPerformed
        final JToggleButton currentButton = this.rangeToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sensorRange == 3 && !willDisrupt(3))
        {
            this.sensorRange--;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && sensorRange == 2)
        {
            this.sensorRange++;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_rangeToggleButton3ActionPerformed

    private void weaponAmpToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponAmpToggleButton1ActionPerformed
        final JToggleButton currentButton = this.weaponAmpToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.weaponAmp == 1 && !willDisrupt(3))
        {
            this.weaponAmp--;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && weaponAmp == 0)
        {
            this.weaponAmp++;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_weaponAmpToggleButton1ActionPerformed

    private void weaponAmpToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponAmpToggleButton2ActionPerformed
        final JToggleButton currentButton = this.weaponAmpToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.weaponAmp == 2 && !willDisrupt(3))
        {
            this.weaponAmp--;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && weaponAmp == 1)
        {
            this.weaponAmp++;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_weaponAmpToggleButton2ActionPerformed

    private void weaponAmpToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponAmpToggleButton3ActionPerformed
        final JToggleButton currentButton = this.weaponAmpToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.weaponAmp == 3 && !willDisrupt(3))
        {
            this.weaponAmp--;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && weaponAmp == 2)
        {
            this.weaponAmp++;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_weaponAmpToggleButton3ActionPerformed

    private void weaponSpecToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponSpecToggleButton1ActionPerformed
        final JToggleButton currentButton = this.weaponSpecToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.weaponSpec == 1 && !willDisrupt(3))
        {
            this.weaponSpec--;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && weaponSpec == 0)
        {
            this.weaponSpec++;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_weaponSpecToggleButton1ActionPerformed

    private void weaponSpecToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponSpecToggleButton2ActionPerformed
        final JToggleButton currentButton = this.weaponSpecToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.weaponSpec == 2 && !willDisrupt(3))
        {
            this.weaponSpec--;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && weaponSpec == 1)
        {
            this.weaponSpec++;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_weaponSpecToggleButton2ActionPerformed

    private void weaponSpecToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponSpecToggleButton3ActionPerformed
        final JToggleButton currentButton = this.weaponSpecToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.weaponSpec == 3 && !willDisrupt(3))
        {
            this.weaponSpec--;
            spentOn.set(3, spentOn.get(3)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceCaptain() && this.skillPoints > 0 && weaponSpec == 2)
        {
            this.weaponSpec++;
            spentOn.set(3, spentOn.get(3)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_weaponSpecToggleButton3ActionPerformed

    private void tacReadinessToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tacReadinessToggleButton1ActionPerformed
        final JToggleButton currentButton = this.tacReadinessToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.tacReadiness == 1 && !willDisrupt(4))
        {
            this.tacReadiness--;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && tacReadiness == 0)
        {
            this.tacReadiness++;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_tacReadinessToggleButton1ActionPerformed

    private void tacReadinessToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tacReadinessToggleButton2ActionPerformed
        final JToggleButton currentButton = this.tacReadinessToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.tacReadiness == 2 && !willDisrupt(4))
        {
            this.tacReadiness--;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && tacReadiness == 1)
        {
            this.tacReadiness++;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_tacReadinessToggleButton2ActionPerformed

    private void tacReadinessToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tacReadinessToggleButton3ActionPerformed
        final JToggleButton currentButton = this.tacReadinessToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.tacReadiness == 3 && !willDisrupt(4))
        {
            this.tacReadiness--;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && tacReadiness == 2)
        {
            this.tacReadiness++;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_tacReadinessToggleButton3ActionPerformed

    private void coordinationToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coordinationToggleButtonActionPerformed
        final JToggleButton currentButton = this.coordinationToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && !this.defCoordination && !this.offCoordination && !willDisrupt(4))
        {
            this.coordination = false;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && !this.coordination)
        {
            this.coordination = true;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_coordinationToggleButtonActionPerformed

    private void defCoordinationToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defCoordinationToggleButtonActionPerformed
        final JToggleButton currentButton = this.defCoordinationToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && defCoordination && !willDisrupt(4))
        {
            this.defCoordination = false;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && this.coordination)
        {
            this.defCoordination = true;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_defCoordinationToggleButtonActionPerformed

    private void offCoordinationToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offCoordinationToggleButtonActionPerformed
        final JToggleButton currentButton = this.offCoordinationToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && offCoordination && !willDisrupt(4))
        {
            this.offCoordination = false;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnTactical--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && this.coordination)
        {
            this.offCoordination = true;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnTactical++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_offCoordinationToggleButtonActionPerformed

    private void sheildMasteryToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildMasteryToggleButtonActionPerformed
        final JToggleButton currentButton = this.sheildMasteryToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && !this.sheildAbsorption && !this.sheildReflection && !willDisrupt(4))
        {
            this.sheildMastery = false;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && !this.sheildMastery)
        {
            this.sheildMastery = true;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildMasteryToggleButtonActionPerformed

    private void sheildAbsorptionToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildAbsorptionToggleButtonActionPerformed
        final JToggleButton currentButton = this.sheildAbsorptionToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && sheildAbsorption && !willDisrupt(4))
        {
            this.sheildAbsorption = false;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && this.sheildMastery)
        {
            this.sheildAbsorption = true;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildAbsorptionToggleButtonActionPerformed

    private void sheildReflectionToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheildReflectionToggleButtonActionPerformed
        final JToggleButton currentButton = this.sheildReflectionToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && sheildReflection && !willDisrupt(4))
        {
            this.sheildReflection = false;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && this.sheildMastery)
        {
            this.sheildReflection = true;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sheildReflectionToggleButtonActionPerformed

    private void sciReadinessToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sciReadinessToggleButton1ActionPerformed
        final JToggleButton currentButton = this.sciReadinessToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sciReadiness == 1 && !willDisrupt(4))
        {
            this.sciReadiness--;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && sciReadiness == 0)
        {
            this.sciReadiness++;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sciReadinessToggleButton1ActionPerformed

    private void sciReadinessToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sciReadinessToggleButton2ActionPerformed
        final JToggleButton currentButton = this.sciReadinessToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sciReadiness == 2 && !willDisrupt(4))
        {
            this.sciReadiness--;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && sciReadiness == 1)
        {
            this.sciReadiness++;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sciReadinessToggleButton2ActionPerformed

    private void sciReadinessToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sciReadinessToggleButton3ActionPerformed
        final JToggleButton currentButton = this.sciReadinessToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.sciReadiness == 3 && !willDisrupt(4))
        {
            this.sciReadiness--;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnScience--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && sciReadiness == 2)
        {
            this.sciReadiness++;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnScience++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_sciReadinessToggleButton3ActionPerformed

    private void engReadinessToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engReadinessToggleButton1ActionPerformed
        final JToggleButton currentButton = this.engReadinessToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.engReadiness == 1 && !willDisrupt(4))
        {
            this.engReadiness--;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && engReadiness == 0)
        {
            this.engReadiness++;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_engReadinessToggleButton1ActionPerformed

    private void engReadinessToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engReadinessToggleButton2ActionPerformed
        final JToggleButton currentButton = this.engReadinessToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.engReadiness == 2 && !willDisrupt(4))
        {
            this.engReadiness--;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && engReadiness == 1)
        {
            this.engReadiness++;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_engReadinessToggleButton2ActionPerformed

    private void engReadinessToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engReadinessToggleButton3ActionPerformed
        final JToggleButton currentButton = this.engReadinessToggleButton3;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.engReadiness == 3 && !willDisrupt(4))
        {
            this.engReadiness--;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && engReadiness == 2)
        {
            this.engReadiness++;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_engReadinessToggleButton3ActionPerformed

    private void warpPotentialToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warpPotentialToggleButton1ActionPerformed
        final JToggleButton currentButton = this.warpPotentialToggleButton1;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.warpCore == 1 && !warpEfficency && !willDisrupt(4))
        {
            this.warpCore--;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && warpCore == 0)
        {
            this.warpCore++;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_warpPotentialToggleButton1ActionPerformed

    private void warpPotentialToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warpPotentialToggleButton2ActionPerformed
        final JToggleButton currentButton = this.warpPotentialToggleButton2;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.warpCore == 2 && !willDisrupt(4))
        {
            this.warpCore--;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && warpCore == 1)
        {
            this.warpCore++;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_warpPotentialToggleButton2ActionPerformed

    private void warpEfficiencyToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warpEfficiencyToggleButtonActionPerformed
        final JToggleButton currentButton = this.warpEfficiencyToggleButton;
        final boolean isSelected = currentButton.isSelected();
        //If the user is attempting to rollback the selection, make sure its not below the top skill point
        if(!isSelected && this.warpEfficency && !willDisrupt(4))
        {
            this.warpEfficency = false;
            spentOn.set(4, spentOn.get(4)-1);
            this.spentOnEngineering--;
            this.skillPoints++;
        }
        //else if the user is trying to add a skill point make sure he/she has the needed point and isn't above the lowest point
        else if(canPlaceAdmiral() && this.skillPoints > 0 && warpCore >= 1)
        {
            this.warpEfficency = true;
            spentOn.set(4, spentOn.get(4)+1);
            this.spentOnEngineering++;
            this.skillPoints--;
        }
        //otherwise reverse users selection
        else
            currentButton.setSelected(!isSelected);
    }//GEN-LAST:event_warpEfficiencyToggleButtonActionPerformed

    private void clearPointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPointsButtonActionPerformed
        for(JToggleButton toggleButton: toggleButtons)
            toggleButton.setSelected(false);
            
    }//GEN-LAST:event_clearPointsButtonActionPerformed

    private void sciUltimateRadioButtonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sciUltimateRadioButtonsActionPerformed
        if(additionalSciUltimate > 0 && ((JRadioButton)evt.getSource()).isSelected())
        {
            ((JRadioButton)evt.getSource()).setSelected(true);
            additionalSciUltimate--;
        }
        else if(!((JRadioButton)evt.getSource()).isSelected())
        {
            ((JRadioButton)evt.getSource()).setSelected(false);
            additionalSciUltimate++;
        }
        else
            ((JRadioButton)evt.getSource()).setSelected(false);
    }//GEN-LAST:event_sciUltimateRadioButtonsActionPerformed

    private void tacUltimateRadioButtonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tacUltimateRadioButtonsActionPerformed
        if(additionalTacUltimate > 0 && ((JRadioButton)evt.getSource()).isSelected())
        {
            ((JRadioButton)evt.getSource()).setSelected(true);
            additionalTacUltimate--;
        }
        else if(!((JRadioButton)evt.getSource()).isSelected())
        {
            ((JRadioButton)evt.getSource()).setSelected(false);
            additionalTacUltimate++;
        }
        else
            ((JRadioButton)evt.getSource()).setSelected(false);
    }//GEN-LAST:event_tacUltimateRadioButtonsActionPerformed

    private void engUltimateRadioButtonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engUltimateRadioButtonsActionPerformed
        if(additionalEngUltimate > 0 && ((JRadioButton)evt.getSource()).isSelected())
        {
            ((JRadioButton)evt.getSource()).setSelected(true);
            additionalEngUltimate--;
        }
        else if(!((JRadioButton)evt.getSource()).isSelected())
        {
            ((JRadioButton)evt.getSource()).setSelected(false);
            additionalEngUltimate++;
        }
        else
            ((JRadioButton)evt.getSource()).setSelected(false);
    }//GEN-LAST:event_engUltimateRadioButtonsActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        aboutBox.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    
    private boolean canPlaceLiuCommander()
    {
        if(!forceOrderedDescent || spentOn.get(0) >= 5) return true;
        
        return false;
    }
    
    private boolean canPlaceCommander()
    {
        if(!forceOrderedDescent || spentOn.get(0)+spentOn.get(1) >= 15) return true;
        
        return false;
    }
    
    private boolean canPlaceCaptain()
    {
        if(!forceOrderedDescent || spentOn.get(0)+spentOn.get(1)+spentOn.get(2) >= 25) return true;
        
        return false;
    }
    
    private boolean canPlaceAdmiral()
    {
        if(!forceOrderedDescent || spentOn.get(0)+spentOn.get(1)+spentOn.get(2)+spentOn.get(3) >= 35) return true;
        
        return false;
    }
    
    private int highestTeirPlaced()
    {
        int highestTeir;
        for(highestTeir = 0; highestTeir < 5; highestTeir++)
            if(spentOn.get(highestTeir) == 0) break;
        
        return highestTeir-1;
    }
    
    private boolean willDisrupt(int teirRemovedFrom)
    {
        if(!forceOrderedDescent) return false;
        
        //System.out.println("teirRemovedFrom: "+teirRemovedFrom);
        int skillPointsBelow = 0;
        for(int i = teirRemovedFrom; i >= 0; i--)
            skillPointsBelow += spentOn.get(i);
        //System.out.println("skillPointsBelow: "+skillPointsBelow);
        //System.out.println("((10*(highestTeirPlaced()-1))+5): "+((10*(highestTeirPlaced()-1))+5));
        
        if(teirRemovedFrom < highestTeirPlaced() && !((skillPointsBelow-1) >= ((10*(highestTeirPlaced()-1))+5))) return true;
        
        return false;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(STOSkillPlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(STOSkillPlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(STOSkillPlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(STOSkillPlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new STOSkillPlanner().setVisible(true);
            }
        });
    }

    //Point Trackers
    private int skillPoints;
    private java.util.ArrayList<Integer> spentOn; //Might need this to fix problem with the not being able to deal with different teir skillpoints in willDisrupt()
    private int spentOnLieutenant;
    private int spentOnLiuCommander;
    private int spentOnCommander;
    private int spentOnCaptain;
    private int spentOnAdmiral;
    private int spentOnEngineering;
    private int spentOnScience;
    private int spentOnTactical;
    //UI controlers
    private boolean forceOrderedDescent;
    private int additionalSciUltimate;
    private int additionalTacUltimate;
    private int additionalEngUltimate;
    //Skill Trackers
    private int hullRestoration;
    private int hullCapacity;
    private int sheildRestoration;
    private int sheildCapacity;
    private int energyTraining;
    private int projectileTraining;
    private boolean hullPlating;
    private boolean energizedPlating;
    private boolean ablativePlating;
    private int damageControl;
    private int targeting;
    private int defensiveManuvering;
    private int sheildRegeneration;
    private int sheildHardness;
    private int hullPen;
    private int sheildPen;
    private boolean defSubsystem;
    private boolean sheildSubsystem;
    private boolean auxSubsystem;
    private boolean offSubsystem;
    private boolean wepSubsystem;
    private boolean engSubsystem;
    private int EPS; //only goes to 2 then use impulse shunt
    private boolean impulseShunt;
    private int impulse;
    private int control; //only goes to 2, third skill is Amplification
    private boolean controlAmplification;
    private int drain; //only goes to 2, third skill is Infection
    private boolean drainInfection;
    private int weaponAmp;
    private int weaponSpec;
    private int partGen;
    private int sensorRange;
    private int tacReadiness;
    private boolean coordination;
    private boolean defCoordination;
    private boolean offCoordination;
    private int sciReadiness;
    private boolean sheildMastery;
    private boolean sheildAbsorption;
    private boolean sheildReflection;
    private int engReadiness;
    private int warpCore; //only goes to 2, third skill is efficency
    private boolean warpEfficency;
    
    private final int INITIAL_WIDTH = 1362;
    private final int INITIAL_HEIGHT = 610;
    private int lastWidth = INITIAL_WIDTH;
    
    private java.util.ArrayList<JToggleButton> toggleButtons;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton EPSToggleButton1;
    private javax.swing.JToggleButton EPSToggleButton2;
    private javax.swing.JMenu UIMenu;
    private javax.swing.JToggleButton ablativePlatingToggleButton;
    private javax.swing.JDialog aboutBox;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel additionalAbilitiesPanel;
    private javax.swing.JPanel admiralEngPanel;
    private javax.swing.JPanel admiralPanel;
    private javax.swing.JPanel admiralSciPanel;
    private javax.swing.JPanel admiralTacPanel;
    private javax.swing.JRadioButton assaultRadioButton;
    private javax.swing.JToggleButton auxSubsystemToggleButton;
    private javax.swing.JPanel captainEngPanel;
    private javax.swing.JPanel captainPanel;
    private javax.swing.JPanel captainSciPanel;
    private javax.swing.JPanel captainTacPanel;
    private javax.swing.JButton clearPointsButton;
    private javax.swing.JPanel commandEngPanel;
    private javax.swing.JPanel commandSciPanel;
    private javax.swing.JPanel commandTacPanel;
    private javax.swing.JPanel commanderPanel;
    private javax.swing.JToggleButton controlAmplificationToggleButton;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JToggleButton controlToggleButton1;
    private javax.swing.JToggleButton controlToggleButton2;
    private javax.swing.JPanel coordinationPanel;
    private javax.swing.JToggleButton coordinationToggleButton;
    private javax.swing.JPanel damageControlPanel;
    private javax.swing.JToggleButton damageControlToggleButton1;
    private javax.swing.JToggleButton damageControlToggleButton2;
    private javax.swing.JToggleButton damageControlToggleButton3;
    private javax.swing.JToggleButton defCoordinationToggleButton;
    private javax.swing.JPanel defSubsystemPanel;
    private javax.swing.JToggleButton defSubsystemToggleButton;
    private javax.swing.JPanel defensiveManuveringPanel;
    private javax.swing.JToggleButton defensiveManuveringToggleButton1;
    private javax.swing.JToggleButton defensiveManuveringToggleButton2;
    private javax.swing.JToggleButton defensiveManuveringToggleButton3;
    private javax.swing.JToggleButton drainInfectionToggleButton;
    private javax.swing.JPanel drainPanel;
    private javax.swing.JToggleButton drainToggleButton1;
    private javax.swing.JToggleButton drainToggleButton2;
    private javax.swing.JToggleButton energizedPlatingToggleButton;
    private javax.swing.JToggleButton energyToggleButton1;
    private javax.swing.JToggleButton energyToggleButton2;
    private javax.swing.JToggleButton energyToggleButton3;
    private javax.swing.JPanel energyTrainingPanel;
    private javax.swing.JPanel engLabelPanel;
    private javax.swing.JLabel engPointsUsedLabel;
    private javax.swing.JPanel engReadinessPanel;
    private javax.swing.JToggleButton engReadinessToggleButton1;
    private javax.swing.JToggleButton engReadinessToggleButton2;
    private javax.swing.JToggleButton engReadinessToggleButton3;
    private javax.swing.JCheckBox engUltimateCheckBox;
    private javax.swing.JToggleButton engineSubsystemToggleButton;
    private javax.swing.JComboBox engineeringBoostComboBox1;
    private javax.swing.JComboBox engineeringBoostComboBox2;
    private javax.swing.JComboBox engineeringBoostComboBox3;
    private javax.swing.JComboBox engineeringBoostComboBox4;
    private javax.swing.JRadioButton enhancedRadioButton;
    private javax.swing.JPanel epsPanel;
    private javax.swing.JRadioButton explosionlRadioButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel hullCapacityPanel;
    private javax.swing.JToggleButton hullCapacityToggleButton1;
    private javax.swing.JToggleButton hullCapacityToggleButton2;
    private javax.swing.JToggleButton hullCapacityToggleButton3;
    private javax.swing.JPanel hullPenPanel;
    private javax.swing.JToggleButton hullPenToggleButton1;
    private javax.swing.JToggleButton hullPenToggleButton2;
    private javax.swing.JToggleButton hullPenToggleButton3;
    private javax.swing.JToggleButton hullPlatingToggleButton;
    private javax.swing.JPanel hullRestorationPanel;
    private javax.swing.JToggleButton hullRestorationToggleButton1;
    private javax.swing.JToggleButton hullRestorationToggleButton2;
    private javax.swing.JToggleButton hullRestorationToggleButton3;
    private javax.swing.JPanel impulsePanel;
    private javax.swing.JToggleButton impulseShuntToggleButton;
    private javax.swing.JToggleButton impulseToggleButton1;
    private javax.swing.JToggleButton impulseToggleButton2;
    private javax.swing.JToggleButton impulseToggleButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JPanel lieutenantPanel;
    private javax.swing.JPanel liutCommandEngPanel;
    private javax.swing.JPanel liutCommandSciPanel;
    private javax.swing.JPanel liutCommandTacPanel;
    private javax.swing.JPanel liutEngPanel;
    private javax.swing.JPanel liutSciPanel;
    private javax.swing.JPanel liutTacPanel;
    private javax.swing.JPanel ltCommanderPanel;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JRadioButton manipulationRadioButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JToggleButton offCoordinationToggleButton;
    private javax.swing.JPanel offSubsystemPanel;
    private javax.swing.JToggleButton offSubsystemToggleButton;
    private javax.swing.JPanel partGenPanel;
    private javax.swing.JToggleButton partGenToggleButton1;
    private javax.swing.JToggleButton partGenToggleButton2;
    private javax.swing.JToggleButton partGenToggleButton3;
    private javax.swing.JPanel platingPanel;
    private javax.swing.JPanel pointsPanel;
    private javax.swing.JToggleButton projectileToggleButton1;
    private javax.swing.JToggleButton projectileToggleButton2;
    private javax.swing.JToggleButton projectileToggleButton3;
    private javax.swing.JPanel rangePanel;
    private javax.swing.JToggleButton rangeToggleButton1;
    private javax.swing.JToggleButton rangeToggleButton2;
    private javax.swing.JToggleButton rangeToggleButton3;
    private javax.swing.JRadioButton reactionRadioButton;
    private javax.swing.JCheckBoxMenuItem resizableCheckBoxMenuItem;
    private javax.swing.JPanel sciLabelPanel;
    private javax.swing.JLabel sciPointsUsedLabel;
    private javax.swing.JPanel sciReadinessPanel;
    private javax.swing.JToggleButton sciReadinessToggleButton1;
    private javax.swing.JToggleButton sciReadinessToggleButton2;
    private javax.swing.JToggleButton sciReadinessToggleButton3;
    private javax.swing.JCheckBox sciUltimateCheckBox;
    private javax.swing.JComboBox scienceBoostComboBox1;
    private javax.swing.JComboBox scienceBoostComboBox2;
    private javax.swing.JComboBox scienceBoostComboBox3;
    private javax.swing.JComboBox scienceBoostComboBox4;
    private javax.swing.JToggleButton sheildAbsorptionToggleButton;
    private javax.swing.JPanel sheildCapacityPanel;
    private javax.swing.JToggleButton sheildCapactiyToggleButton1;
    private javax.swing.JToggleButton sheildCapactiyToggleButton2;
    private javax.swing.JToggleButton sheildCapactiyToggleButton3;
    private javax.swing.JPanel sheildHardnessPanel;
    private javax.swing.JToggleButton sheildHardnessToggleButton1;
    private javax.swing.JToggleButton sheildHardnessToggleButton2;
    private javax.swing.JToggleButton sheildHardnessToggleButton3;
    private javax.swing.JPanel sheildMasteryPanel;
    private javax.swing.JToggleButton sheildMasteryToggleButton;
    private javax.swing.JPanel sheildPenPanel;
    private javax.swing.JToggleButton sheildPenToggleButton1;
    private javax.swing.JToggleButton sheildPenToggleButton2;
    private javax.swing.JToggleButton sheildPenToggleButton3;
    private javax.swing.JToggleButton sheildReflectionToggleButton;
    private javax.swing.JPanel sheildRegenerationPanel;
    private javax.swing.JToggleButton sheildRegenerationToggleButton1;
    private javax.swing.JToggleButton sheildRegenerationToggleButton2;
    private javax.swing.JToggleButton sheildRegenerationToggleButton3;
    private javax.swing.JPanel sheildRestorationPanel;
    private javax.swing.JToggleButton sheildRestorationToggleButton1;
    private javax.swing.JToggleButton sheildRestorationToggleButton2;
    private javax.swing.JToggleButton sheildRestorationToggleButton3;
    private javax.swing.JToggleButton sheildSubsystemToggleButton;
    private javax.swing.JRadioButton shellRadioButton;
    private javax.swing.JPanel skillCaptionPanel;
    private javax.swing.JPanel skillPanel;
    private javax.swing.JPanel skillPlacementPanel;
    private javax.swing.JLabel skillPointsLabel;
    private javax.swing.JPanel tacLabelPanel;
    private javax.swing.JLabel tacPointsUsedLabel;
    private javax.swing.JPanel tacReadinessPanel;
    private javax.swing.JToggleButton tacReadinessToggleButton1;
    private javax.swing.JToggleButton tacReadinessToggleButton2;
    private javax.swing.JToggleButton tacReadinessToggleButton3;
    private javax.swing.JCheckBox tacUltimateCheckBox;
    private javax.swing.JComboBox tacticalBoostComboBox1;
    private javax.swing.JComboBox tacticalBoostComboBox2;
    private javax.swing.JComboBox tacticalBoostComboBox3;
    private javax.swing.JComboBox tacticalBoostComboBox4;
    private javax.swing.JPanel targetingPanel;
    private javax.swing.JToggleButton targetingToggleButton1;
    private javax.swing.JToggleButton targetingToggleButton2;
    private javax.swing.JToggleButton targetingToggleButton3;
    private javax.swing.JRadioButton teamRadioButton;
    private javax.swing.JPanel torpedoTrainingPanel;
    private javax.swing.JRadioButton wakeningRadioButton;
    private javax.swing.JPanel warpCorePanel;
    private javax.swing.JToggleButton warpEfficiencyToggleButton;
    private javax.swing.JToggleButton warpPotentialToggleButton1;
    private javax.swing.JToggleButton warpPotentialToggleButton2;
    private javax.swing.JPanel weaponAmpPanel;
    private javax.swing.JToggleButton weaponAmpToggleButton1;
    private javax.swing.JToggleButton weaponAmpToggleButton2;
    private javax.swing.JToggleButton weaponAmpToggleButton3;
    private javax.swing.JPanel weaponSpecPanel;
    private javax.swing.JToggleButton weaponSpecToggleButton1;
    private javax.swing.JToggleButton weaponSpecToggleButton2;
    private javax.swing.JToggleButton weaponSpecToggleButton3;
    private javax.swing.JToggleButton weaponSubsystemToggleButton;
    private javax.swing.JRadioButton windowRadioButton;
    // End of variables declaration//GEN-END:variables
}
